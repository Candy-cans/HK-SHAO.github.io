<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HK-SHAO</title>
  
  <subtitle>Shao&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-01T17:02:48.598Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王家晔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用TensorFlow机器学习框架构建学校学科成绩的线性模型</title>
    <link href="http://yoursite.com/2019/01/31/%E7%94%A8TensorFlow%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E6%9E%84%E5%BB%BA%E5%AD%A6%E6%A0%A1%E5%AD%A6%E7%A7%91%E6%88%90%E7%BB%A9%E7%9A%84%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/01/31/用TensorFlow机器学习框架构建学校学科成绩的线性模型/</id>
    <published>2019-01-31T09:15:59.000Z</published>
    <updated>2019-02-01T17:02:48.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TensorFlow机器学习框架"><a href="#TensorFlow机器学习框架" class="headerlink" title="TensorFlow机器学习框架"></a>TensorFlow机器学习框架</h2><p>TensorFlow是Google开源的一个机器学习框架，它可以在Python环境下运行，我昨天认识和接触它。<br><img src="/images/blog/10.PNG" alt=""><br><a id="more"></a></p><h2 id="模型构建方法-amp-事情经过"><a href="#模型构建方法-amp-事情经过" class="headerlink" title="模型构建方法&amp;事情经过"></a>模型构建方法&amp;事情经过</h2><p>昨天我用Excel尝试绘制了我们学校高二年级的各个学科——物理散点图，然后用Excel绘制了三次方回归曲线，我发现不论是哪个学科与物理，拟合优度 $R^2$ 都很低，这代表它们之间的的关系并不明显，几乎是随机的。  </p><p>因此我就想，如果一个量映射到另一个量的关系不明显，那我几个量映射到一个量可能就会有比较强的关系了。但是想要找到这个关系，似乎非常困难，我尝试把各个学科与物理的三次方回归曲线以它的拟合优度 $R^2$ 为权重线性混合起来，结果得到了一个不三不四的方程，处理极其困难，误差也很大。  </p><p>刚好昨天认识了TensorFlow（后面简称TF），于是打算下载使用TF训练出我想要的模型，但是在安装TF的过程中遇到了很多坑，这里我就不细说了。  </p><p>在使用TF前，我简单的看了几个别人写的Demo，然后我就开始构建学校学科成绩的线性模型，步骤基本分为下面几个。</p><h3 id="1，构建模型"><a href="#1，构建模型" class="headerlink" title="1，构建模型"></a>1，构建模型</h3><p>我将物理成绩构建成一个线性模型，满足下面这个式子：</p><script type="math/tex; mode=display">{\begin{aligned}物理成绩 &\approx a \times 语文成绩 \\&+ b \times 数学成绩 \\&+ c \times 英语成绩 \\&+ d \times 化学成绩 \\&+ e \times 生物成绩 \\&+ s\end{aligned}}</script><p>我们只需要使用TF，把上式的各个系数优化到最贴近真实，使得我把一个真实的成绩代入上式后能得到一个较为精确的值。</p><h3 id="2，找数据，然后把数据转换成csv格式"><a href="#2，找数据，然后把数据转换成csv格式" class="headerlink" title="2，找数据，然后把数据转换成csv格式"></a>2，找数据，然后把数据转换成csv格式</h3><p>我找到了我们高二年级这次期末统考成绩的表格，用Excel打开它，然后提取所需要的数据，另存为csv格式。</p><h3 id="3，用Python写一个读取csv的程序"><a href="#3，用Python写一个读取csv的程序" class="headerlink" title="3，用Python写一个读取csv的程序"></a>3，用Python写一个读取csv的程序</h3><p>要注意csv文件的编码！其它我就不细说了。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">csv_file = csv.reader(<span class="built_in">open</span>(<span class="string">'cj.csv'</span>, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">x_data = []</span><br><span class="line">y_data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data in csv_file:</span><br><span class="line">    x_s = data[<span class="number">3</span>]</span><br><span class="line">    y_s = data[<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">if</span> not len(x_s) * len(y_s) == <span class="number">0</span>:</span><br><span class="line">        x_data.<span class="built_in">append</span>(<span class="built_in">float</span>(x_s))</span><br><span class="line">        y_data.<span class="built_in">append</span>(<span class="built_in">float</span>(y_s))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x_data)</span><br></pre></td></tr></table></figure></p><h3 id="4，用Python写TS的模型训练程序"><a href="#4，用Python写TS的模型训练程序" class="headerlink" title="4，用Python写TS的模型训练程序"></a>4，用Python写TS的模型训练程序</h3><p>运行下面的这个程序，训练一千万次来优化系数。具体不细说了，下面是这个工程的全部源码：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow <span class="keyword">as</span> <span class="keyword">tf</span></span><br><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line">import csv</span><br><span class="line"></span><br><span class="line">csv_file = csv.reader(<span class="keyword">open</span>(<span class="string">'cj.csv'</span>, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">a_data = []</span><br><span class="line">b_data = []</span><br><span class="line">c_data = []</span><br><span class="line">d_data = []</span><br><span class="line">e_data = []</span><br><span class="line">y_data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data in csv_file:</span><br><span class="line">    a_s = data[<span class="number">0</span>]</span><br><span class="line">    b_s = data[<span class="number">1</span>]</span><br><span class="line">    c_s = data[<span class="number">2</span>]</span><br><span class="line">    d_s = data[<span class="number">3</span>]</span><br><span class="line">    e_s = data[<span class="number">4</span>]</span><br><span class="line">    y_s = data[<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">if</span> not <span class="built_in">len</span>(a_s)*<span class="built_in">len</span>(b_s)*<span class="built_in">len</span>(c_s)*<span class="built_in">len</span>(d_s)*<span class="built_in">len</span>(e_s)*<span class="built_in">len</span>(y_s) == <span class="number">0</span>:</span><br><span class="line">        a_data.<span class="keyword">append</span>(float(a_s))</span><br><span class="line">        b_data.<span class="keyword">append</span>(float(b_s))</span><br><span class="line">        c_data.<span class="keyword">append</span>(float(c_s))</span><br><span class="line">        d_data.<span class="keyword">append</span>(float(d_s))</span><br><span class="line">        e_data.<span class="keyword">append</span>(float(e_s))</span><br><span class="line">        y_data.<span class="keyword">append</span>(float(y_s))</span><br><span class="line"></span><br><span class="line"># 构造一个线性模型</span><br><span class="line"><span class="keyword">a</span> = <span class="keyword">tf</span>.Variable(<span class="keyword">tf</span>.random_uniform([<span class="number">1</span>], -<span class="number">1.0</span>, <span class="number">1.0</span>))</span><br><span class="line"><span class="keyword">b</span> = <span class="keyword">tf</span>.Variable(<span class="keyword">tf</span>.random_uniform([<span class="number">1</span>], -<span class="number">1.0</span>, <span class="number">1.0</span>))</span><br><span class="line"><span class="keyword">c</span> = <span class="keyword">tf</span>.Variable(<span class="keyword">tf</span>.random_uniform([<span class="number">1</span>], -<span class="number">1.0</span>, <span class="number">1.0</span>))</span><br><span class="line">d = <span class="keyword">tf</span>.Variable(<span class="keyword">tf</span>.random_uniform([<span class="number">1</span>], -<span class="number">1.0</span>, <span class="number">1.0</span>))</span><br><span class="line"><span class="keyword">e</span> = <span class="keyword">tf</span>.Variable(<span class="keyword">tf</span>.random_uniform([<span class="number">1</span>], -<span class="number">1.0</span>, <span class="number">1.0</span>))</span><br><span class="line">s = <span class="keyword">tf</span>.Variable(<span class="keyword">tf</span>.random_uniform([<span class="number">1</span>], -<span class="number">1.0</span>, <span class="number">1.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">y</span> = <span class="keyword">a</span>*a_data + <span class="keyword">b</span>*b_data + <span class="keyword">c</span>*c_data + d*d_data + <span class="keyword">e</span>*e_data + s</span><br><span class="line"></span><br><span class="line"># 最小化方差</span><br><span class="line">loss = <span class="keyword">tf</span>.reduce_mean(<span class="keyword">tf</span>.square(<span class="keyword">y</span> - y_data))</span><br><span class="line">optimizer = <span class="keyword">tf</span>.train.GradientDescentOptimizer(<span class="number">0.00001</span>)</span><br><span class="line">train = optimizer.minimize(loss)</span><br><span class="line"></span><br><span class="line"># 初始化变量</span><br><span class="line">init = <span class="keyword">tf</span>.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"># 启动图 (graph)</span><br><span class="line">sess = <span class="keyword">tf</span>.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"># 拟合</span><br><span class="line"><span class="keyword">for</span> step in <span class="built_in">range</span>(<span class="number">10000001</span>):</span><br><span class="line">    sess.run(train)</span><br><span class="line">    <span class="keyword">if</span> step % <span class="number">1000000</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span>(step, sess.run(<span class="keyword">a</span>), sess.run(<span class="keyword">b</span>), sess.run(<span class="keyword">c</span>), sess.run(d), sess.run(<span class="keyword">e</span>), sess.run(s))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> True :</span><br><span class="line">    a1 = float(<span class="built_in">input</span>(<span class="string">"语文成绩："</span>))</span><br><span class="line">    b1 = float(<span class="built_in">input</span>(<span class="string">"数学成绩："</span>))</span><br><span class="line">    c1 = float(<span class="built_in">input</span>(<span class="string">"英语成绩："</span>))</span><br><span class="line">    d1 = float(<span class="built_in">input</span>(<span class="string">"化学成绩："</span>))</span><br><span class="line">    e1 = float(<span class="built_in">input</span>(<span class="string">"生物成绩："</span>))</span><br><span class="line">    v = sess.run(<span class="keyword">a</span>)*a1 + sess.run(<span class="keyword">b</span>)*b1 + sess.run(<span class="keyword">c</span>)*c1 + sess.run(d)*d1 + sess.run(<span class="keyword">e</span>)*e1 + sess.run(s)</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"你的物理成绩大概是："</span>, v[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></p><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><script type="math/tex; mode=display">{\begin{aligned}物理成绩 \approx &-0.04158394 \times 语文成绩 \\&+ 0.37960723 \times 数学成绩 \\&+ 0.18630792 \times 英语成绩 \\&+ 0.48215818 \times 化学成绩 \\&+ 0.28883076 \times 生物成绩 \\&- 26.1632100\end{aligned}}</script><p><img src="/images/blog/11.PNG" alt=""></p><h2 id="猜想和总结"><a href="#猜想和总结" class="headerlink" title="猜想和总结"></a>猜想和总结</h2><p>上面的一个模型，使用范围是有限的，因为我的数据仅仅只是我们学校高二年级在2019年的期末统考数据。精度也是有限的，因为我的数据只有1000多个，并且我使用的是线性模型，所以一般来说误差会在10以内，比较好的情况下误差不超过2。  </p><p>如果把模型构建成二次方，三次方，甚至更多，那么所得到的模型就越贴近真实，但是训练次数也要更多，模型的表达式也会很复杂。</p><p>上面式子每个成绩前面的系数，就是这个学科成绩对物理成绩的影响大小，可以发现化学成绩前的系数最大，这代表着大部分化学成绩优秀的学生，物理成绩也不会太差。我们还可以发现语文成绩前面的系数竟然是负值！这说明，物理成绩较好的学生，语文往往拖他后退。</p><h2 id="两张散点图"><a href="#两张散点图" class="headerlink" title="两张散点图"></a>两张散点图</h2><h3 id="化学——物理"><a href="#化学——物理" class="headerlink" title="化学——物理"></a>化学——物理</h3><p><img src="/images/blog/12.PNG" alt=""></p><h3 id="语文——物理"><a href="#语文——物理" class="headerlink" title="语文——物理"></a>语文——物理</h3><p><img src="/images/blog/13.PNG" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TensorFlow机器学习框架&quot;&gt;&lt;a href=&quot;#TensorFlow机器学习框架&quot; class=&quot;headerlink&quot; title=&quot;TensorFlow机器学习框架&quot;&gt;&lt;/a&gt;TensorFlow机器学习框架&lt;/h2&gt;&lt;p&gt;TensorFlow是Google开源的一个机器学习框架，它可以在Python环境下运行，我昨天认识和接触它。&lt;br&gt;&lt;img src=&quot;/images/blog/10.PNG&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="程序&amp;算法" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F-%E7%AE%97%E6%B3%95/"/>
    
      <category term="人工智能" scheme="http://yoursite.com/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
      <category term="数学建模" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>本站着色编辑器上线啦！</title>
    <link href="http://yoursite.com/2019/01/29/%E6%9C%AC%E7%AB%99%E7%9D%80%E8%89%B2%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%8A%E7%BA%BF%E5%95%A6%EF%BC%81/"/>
    <id>http://yoursite.com/2019/01/29/本站着色编辑器上线啦！/</id>
    <published>2019-01-29T12:43:56.000Z</published>
    <updated>2019-01-29T14:03:54.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是着色器？"><a href="#什么是着色器？" class="headerlink" title="什么是着色器？"></a>什么是着色器？</h2><p>如果你不知道什么是着色器（Shader），你可以先看我之前写的这篇博客： <a href="https://hk-shao.github.io/2018/08/26/OpenGL%E7%9D%80%E8%89%B2%E5%99%A8%EF%BC%88Shader%EF%BC%89%E5%92%8CGLSL%E8%AF%AD%E8%A8%80%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener">点击这里</a>  </p><p>我写的可能晦涩难懂，这里强烈推荐一本介绍Shader的书，它可以在线免费阅读，非常感谢它的作者和这本书的翻译！<br><a href="https://thebookofshaders.com/00/?lan=ch" target="_blank" rel="noopener">《The Book of Shaders》</a>——<em>by Patricio Gonzalez Vivo &amp; Jen Lowe</em></p><h2 id="ShaderEditor使用地址"><a href="#ShaderEditor使用地址" class="headerlink" title="ShaderEditor使用地址"></a>ShaderEditor使用地址</h2><p><a href="https://hk-shao.github.io/demo/ShaderEditor/" target="_blank" rel="noopener">点击这里</a> 打开着色编辑器。当然，你也可以在本站左下角的Demo里打开，界面如下图<br><img src="/images/blog/9.PNG" alt=""><a id="more"></a></p><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><p>这个是GitHub上的一个开源项目：<a href="https://github.com/patriciogonzalezvivo/glslEditor" target="_blank" rel="noopener">https://github.com/patriciogonzalezvivo/glslEditor</a><br>我只是把它搬进我的博客网站里而已。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="简单的曲线绘制"><a href="#简单的曲线绘制" class="headerlink" title="简单的曲线绘制"></a>简单的曲线绘制</h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#ifdef GL_ES</span></span><br><span class="line"><span class="keyword">precision</span> <span class="keyword">mediump</span> <span class="type">float</span>;</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec2</span> u_resolution;</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">float</span> u_time;</span><br><span class="line"></span><br><span class="line"><span class="meta">#define ZOOM 20.0</span></span><br><span class="line"><span class="meta">#define LINE_SIZE 2.0</span></span><br><span class="line"><span class="meta">#define GRAD_OFFS vec2(1e-4 * ZOOM, 0.0)</span></span><br><span class="line"><span class="meta">#define GRAD(f, p) (vec2(f(p) - f(p + GRAD_OFFS.xy), f(p) - f(p + GRAD_OFFS.yx)) / GRAD_OFFS.x)</span></span><br><span class="line"><span class="meta">#define PLOT(f, c, d, p) d = mix(c(p), d, smoothstep(0.0, (LINE_SIZE / u_resolution.y * ZOOM), abs(f(p) / length(GRAD(f, p)))))</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> Func(<span class="type">vec2</span> p)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (p.x * p.x + p.y * p.y - <span class="number">9.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">vec3</span> Color(<span class="type">vec2</span> p) &#123; <span class="keyword">return</span> <span class="type">vec3</span>(<span class="number">1.0</span>); &#125;</span><br><span class="line"><span class="type">float</span> Axes(<span class="type">vec2</span> p) &#123; <span class="keyword">return</span> p.x*p.y; &#125;</span><br><span class="line"><span class="type">vec3</span> Ac(<span class="type">vec2</span> p) &#123; <span class="keyword">return</span> <span class="type">vec3</span>(<span class="number">0.2</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">vec2</span> uv = ((<span class="built_in">gl_FragCoord</span>.xy - u_resolution / <span class="number">2.0</span>) / u_resolution.xy) * ZOOM;</span><br><span class="line">    <span class="type">vec3</span> col;</span><br><span class="line">    PLOT(Axes, Ac, col, uv);</span><br><span class="line">    PLOT(Func, Color, col, uv);</span><br><span class="line">    <span class="built_in">gl_FragColor</span> = <span class="type">vec4</span>(col, <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>return (p.x * p.x + p.y * p.y - 9.0);</code> 表示绘制曲线 $x^2+y^2=9$ ，这是一个半径为 $3$ 的圆，你可以将它修改成任何你想绘制的初等函数曲线，比如这样 <code>return (pow(p.x, 2.0) + pow(p.y - pow(pow(p.x, 2.0),1.0 / 3.0), 2.0) - 22.0);</code> 。</p><h3 id="曼德博集绘制"><a href="#曼德博集绘制" class="headerlink" title="曼德博集绘制"></a>曼德博集绘制</h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#ifdef GL_FRAGMENT_PRECISION_HIGH</span></span><br><span class="line"><span class="keyword">precision</span> <span class="keyword">highp</span> <span class="type">float</span>;</span><br><span class="line"><span class="meta">#else</span></span><br><span class="line"><span class="keyword">precision</span> <span class="keyword">mediump</span> <span class="type">float</span>;</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec2</span> u_resolution;</span><br><span class="line"></span><br><span class="line"><span class="type">vec3</span> C,mcol;</span><br><span class="line"><span class="type">bool</span> bColoring=<span class="literal">false</span>;</span><br><span class="line"><span class="meta">#define pi 3.14159265358979</span></span><br><span class="line"><span class="type">float</span> DE(<span class="keyword">in</span> <span class="type">vec3</span> p)&#123;</span><br><span class="line">    <span class="type">float</span> dr=<span class="number">1.0</span>,r=<span class="built_in">length</span>(p);</span><br><span class="line">    <span class="comment">//C=p;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(r&gt;<span class="number">20.0</span>)<span class="keyword">break</span>;</span><br><span class="line">        dr=dr*<span class="number">2.0</span>*r;</span><br><span class="line">        <span class="type">float</span> psi = <span class="built_in">abs</span>(<span class="built_in">mod</span>(<span class="built_in">atan</span>(p.z,p.y)+pi/<span class="number">8.0</span>,pi/<span class="number">4.0</span>)-pi/<span class="number">8.0</span>);</span><br><span class="line">        p.yz=<span class="type">vec2</span>(<span class="built_in">cos</span>(psi),<span class="built_in">sin</span>(psi))*<span class="built_in">length</span>(p.yz);</span><br><span class="line">        <span class="type">vec3</span> p2=p*p;</span><br><span class="line">        p=<span class="type">vec3</span>(<span class="type">vec2</span>(p2.x-p2.y,<span class="number">2.0</span>*p.x*p.y)*(<span class="number">1.0</span>-p2.z/(p2.x+p2.y+p2.z)),</span><br><span class="line">            <span class="number">2.0</span>*p.z*<span class="built_in">sqrt</span>(p2.x+p2.y))+C;</span><br><span class="line">        r=<span class="built_in">length</span>(p);</span><br><span class="line">        <span class="keyword">if</span>(bColoring &amp;&amp; i==<span class="number">3</span>)mcol=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">log</span>(r)*r/<span class="built_in">max</span>(dr,<span class="number">1.0</span>),<span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> rnd(<span class="type">vec2</span> c)&#123;<span class="keyword">return</span> <span class="number">0.5</span>;&#125;</span><br><span class="line"><span class="type">float</span> rndStart(<span class="type">vec2</span> fragCoord)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">float</span> shadao(<span class="type">vec3</span> ro, <span class="type">vec3</span> rd, <span class="type">float</span> px, <span class="type">vec2</span> fragCoord)&#123;<span class="comment">//pretty much IQ's SoftShadow</span></span><br><span class="line">    <span class="type">float</span> res=<span class="number">1.0</span>,d,t=<span class="number">2.0</span>*px*rndStart(fragCoord);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        d=<span class="built_in">max</span>(px,DE(ro+rd*t)*<span class="number">1.5</span>);</span><br><span class="line">        t+=d;</span><br><span class="line">        res=<span class="built_in">min</span>(res,d/t+t*<span class="number">0.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">vec3</span> Sky(<span class="type">vec3</span> rd)&#123;<span class="comment">//what sky??</span></span><br><span class="line">    <span class="keyword">return</span> <span class="type">vec3</span>(<span class="number">0.5</span>+<span class="number">0.5</span>*rd.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">vec3</span> L;</span><br><span class="line"><span class="type">vec3</span> Color(<span class="type">vec3</span> ro, <span class="type">vec3</span> rd, <span class="type">float</span> t, <span class="type">float</span> px, <span class="type">vec3</span> col, <span class="type">bool</span> bFill, <span class="type">vec2</span> fragCoord)&#123;</span><br><span class="line">    ro+=rd*t;</span><br><span class="line">    bColoring=<span class="literal">true</span>;<span class="type">float</span> d=DE(ro);bColoring=<span class="literal">false</span>;</span><br><span class="line">    <span class="type">vec2</span> e=<span class="type">vec2</span>(px*t,<span class="number">0.0</span>);</span><br><span class="line">    <span class="type">vec3</span> dn=<span class="type">vec3</span>(DE(ro-e.xyy),DE(ro-e.yxy),DE(ro-e.yyx));</span><br><span class="line">    <span class="type">vec3</span> dp=<span class="type">vec3</span>(DE(ro+e.xyy),DE(ro+e.yxy),DE(ro+e.yyx));</span><br><span class="line">    <span class="type">vec3</span> N=(dp-dn)/(<span class="built_in">length</span>(dp-<span class="type">vec3</span>(d))+<span class="built_in">length</span>(<span class="type">vec3</span>(d)-dn));</span><br><span class="line">    <span class="type">vec3</span> R=<span class="built_in">reflect</span>(rd,N);</span><br><span class="line">    <span class="type">vec3</span> lc=<span class="type">vec3</span>(<span class="number">1.0</span>,<span class="number">0.9</span>,<span class="number">0.8</span>),sc=<span class="built_in">sqrt</span>(<span class="built_in">abs</span>(<span class="built_in">sin</span>(mcol))),rc=Sky(R);</span><br><span class="line">    <span class="type">float</span> sh=<span class="built_in">clamp</span>(shadao(ro,L,px*t,fragCoord)+<span class="number">0.2</span>,<span class="number">0.0</span>,<span class="number">1.0</span>);</span><br><span class="line">    sh=sh*(<span class="number">0.5</span>+<span class="number">0.5</span>*<span class="built_in">dot</span>(N,L))*<span class="built_in">exp</span>(-t*<span class="number">0.125</span>);</span><br><span class="line">    <span class="type">vec3</span> scol=sh*lc*(sc+rc*<span class="built_in">pow</span>(<span class="built_in">max</span>(<span class="number">0.0</span>,<span class="built_in">dot</span>(R,L)),<span class="number">4.0</span>));</span><br><span class="line">    <span class="keyword">if</span>(bFill)d*=<span class="number">0.05</span>;</span><br><span class="line">    col=<span class="built_in">mix</span>(scol,col,<span class="built_in">clamp</span>(d/(px*t),<span class="number">0.0</span>,<span class="number">1.0</span>));</span><br><span class="line">    <span class="keyword">return</span> col;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">mat3</span> lookat(<span class="type">vec3</span> fw)&#123;</span><br><span class="line">    fw=<span class="built_in">normalize</span>(fw);<span class="type">vec3</span> rt=<span class="built_in">normalize</span>(<span class="built_in">cross</span>(fw,<span class="type">vec3</span>(<span class="number">0.0</span>,<span class="number">1.0</span>,<span class="number">0.0</span>)));<span class="keyword">return</span> <span class="type">mat3</span>(rt,<span class="built_in">cross</span>(rt,fw),fw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main(<span class="type">void</span>) &#123;</span><br><span class="line">    <span class="type">float</span> px=<span class="number">0.5</span>/u_resolution.y;</span><br><span class="line">    L=<span class="built_in">normalize</span>(<span class="type">vec3</span>(<span class="number">0.4</span>,<span class="number">0.8</span>,<span class="number">-0.6</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">vec3</span> ro = <span class="type">vec3</span>(<span class="type">vec2</span>(<span class="number">-0.180</span>,<span class="number">0.550</span>),<span class="number">3.862</span>);</span><br><span class="line">    <span class="type">vec3</span> rd=lookat(<span class="number">-2.0</span>*ro*pi)*<span class="built_in">normalize</span>(<span class="type">vec3</span>((<span class="number">2.0</span>*<span class="built_in">gl_FragCoord</span>.xy-u_resolution.xy)/u_resolution.y,<span class="number">3.0</span>));</span><br><span class="line"></span><br><span class="line">    C = <span class="type">vec3</span>(<span class="number">-0.8</span>,<span class="number">0.0</span>,<span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> t=DE(ro)*rndStart(<span class="built_in">gl_FragCoord</span>.xy),d=<span class="number">0.0</span>,od=<span class="number">10.0</span>;</span><br><span class="line">    <span class="type">vec3</span> edge=<span class="type">vec3</span>(<span class="number">-1.0</span>);</span><br><span class="line">    <span class="type">bool</span> bGrab=<span class="literal">false</span>;</span><br><span class="line">    <span class="type">vec3</span> col=Sky(rd);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">78</span>;i++)&#123;</span><br><span class="line">        t+=d*<span class="number">0.5</span>;</span><br><span class="line">        d=DE(ro+rd*t);</span><br><span class="line">        <span class="keyword">if</span>(d&gt;od)&#123;</span><br><span class="line">            <span class="keyword">if</span>(bGrab &amp;&amp; od&lt;px*t &amp;&amp; edge.x&lt;<span class="number">0.0</span>)&#123;</span><br><span class="line">                edge=<span class="type">vec3</span>(edge.yz,t-od);</span><br><span class="line">                bGrab=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> bGrab=<span class="literal">true</span>;</span><br><span class="line">        od=d;</span><br><span class="line">        <span class="keyword">if</span>(t&gt;<span class="number">5.0</span> || d&lt;<span class="number">1e-5</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> bFill=<span class="literal">false</span>;</span><br><span class="line">    d*=<span class="number">0.05</span>;</span><br><span class="line">    <span class="keyword">if</span>(d&lt;px*t &amp;&amp; t&lt;<span class="number">10.0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(edge.x&gt;<span class="number">0.0</span>)edge=edge.zxy;</span><br><span class="line">        edge=<span class="type">vec3</span>(edge.yz,t);</span><br><span class="line">        bFill=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(edge.z&gt;<span class="number">0.0</span>)col=Color(ro,rd,edge.z,px,col,bFill,<span class="built_in">gl_FragCoord</span>.xy);</span><br><span class="line">        edge=edge.zxy;</span><br><span class="line">        bFill=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">gl_FragColor</span> = <span class="type">vec4</span>(<span class="number">2.0</span>*col,<span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以修改一些参数来绘制更加惊艳的效果。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>运行着色编辑器需要支持WebGL的浏览器</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是着色器？&quot;&gt;&lt;a href=&quot;#什么是着色器？&quot; class=&quot;headerlink&quot; title=&quot;什么是着色器？&quot;&gt;&lt;/a&gt;什么是着色器？&lt;/h2&gt;&lt;p&gt;如果你不知道什么是着色器（Shader），你可以先看我之前写的这篇博客： &lt;a href=&quot;https://hk-shao.github.io/2018/08/26/OpenGL%E7%9D%80%E8%89%B2%E5%99%A8%EF%BC%88Shader%EF%BC%89%E5%92%8CGLSL%E8%AF%AD%E8%A8%80%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击这里&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;我写的可能晦涩难懂，这里强烈推荐一本介绍Shader的书，它可以在线免费阅读，非常感谢它的作者和这本书的翻译！&lt;br&gt;&lt;a href=&quot;https://thebookofshaders.com/00/?lan=ch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《The Book of Shaders》&lt;/a&gt;——&lt;em&gt;by Patricio Gonzalez Vivo &amp;amp; Jen Lowe&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;ShaderEditor使用地址&quot;&gt;&lt;a href=&quot;#ShaderEditor使用地址&quot; class=&quot;headerlink&quot; title=&quot;ShaderEditor使用地址&quot;&gt;&lt;/a&gt;ShaderEditor使用地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://hk-shao.github.io/demo/ShaderEditor/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击这里&lt;/a&gt; 打开着色编辑器。当然，你也可以在本站左下角的Demo里打开，界面如下图&lt;br&gt;&lt;img src=&quot;/images/blog/9.PNG&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
    
      <category term="程序&amp;算法" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F-%E7%AE%97%E6%B3%95/"/>
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="着色器" scheme="http://yoursite.com/tags/%E7%9D%80%E8%89%B2%E5%99%A8/"/>
    
      <category term="Shader" scheme="http://yoursite.com/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg转码视频真的好用！（ffmpeg的简单使用方法）</title>
    <link href="http://yoursite.com/2019/01/29/ffmpeg%E8%BD%AC%E7%A0%81%E8%A7%86%E9%A2%91%E7%9C%9F%E7%9A%84%E5%A5%BD%E7%94%A8%EF%BC%81/"/>
    <id>http://yoursite.com/2019/01/29/ffmpeg转码视频真的好用！/</id>
    <published>2019-01-29T04:43:40.000Z</published>
    <updated>2019-01-29T05:26:00.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="转码和编辑视频"><a href="#转码和编辑视频" class="headerlink" title="转码和编辑视频"></a>转码和编辑视频</h2><p>今天用Android Studio（后面简称AS）里的模拟器给系统录屏，用来展示OpenGL可视化的东西，打算上传B站，后来发现AS只能保存webm格式和GIF格式的视频，并且文件体积巨大，视频图像也是顺时针旋转的。  </p><p>没办法，只能找个视频编辑器进行转码和编辑，结果发现网上的视频转码工具基本粗制滥造，像Adobe PR这样的视频剪辑软件我也没必要下载，于是找到了ffmpeg（其实很早之前在树莓派上玩Linux的时候用过）。  </p><p>我进入<a href="http://ffmpeg.org/" target="_blank" rel="noopener">ffmpeg官网</a>下载了Win64版本，下载速度很快，下载下来就是一个压缩包，解压后就是工具本体了，不过它没有任何UI界面，在Windows下你只能进入bin目录，然后Shift+鼠标右键打开命令窗口，使用ffmpeg的指令进行操作。如下图，可以看到转码效率很高。</p><p><img src="/images/blog/8.PNG" alt=""><br>下面分析网上搜集的ffmpeg简单用法，可以进行很多基础的视频编辑。<br><a id="more"></a></p><h2 id="ffmpeg的简单用法"><a href="#ffmpeg的简单用法" class="headerlink" title="ffmpeg的简单用法"></a>ffmpeg的简单用法</h2><h3 id="转码"><a href="#转码" class="headerlink" title="转码"></a>转码</h3><p>最简单命令如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -<span class="selector-tag">i</span> out<span class="selector-class">.ogv</span> -vcodec h264 out.mp4</span><br><span class="line">ffmpeg -<span class="selector-tag">i</span> out<span class="selector-class">.ogv</span> -vcodec mpeg4 out.mp4</span><br><span class="line">ffmpeg -<span class="selector-tag">i</span> out<span class="selector-class">.ogv</span> -vcodec libxvid out.mp4</span><br><span class="line">ffmpeg -<span class="selector-tag">i</span> out<span class="selector-class">.mp4</span> -vcodec wmv1 out.wmv</span><br><span class="line">ffmpeg -<span class="selector-tag">i</span> out<span class="selector-class">.mp4</span> -vcodec wmv2 out.wmv</span><br></pre></td></tr></table></figure></p><p>-i 后面是输入文件名。-vcodec 后面是编码格式，h264 最佳，但 Windows 系统默认不安装。如果是要插入 ppt 的视频，选择 wmv1 或 wmv2 基本上万无一失。  </p><p>附加选项：-r 指定帧率，-s 指定分辨率，-b 指定比特率；于此同时可以对声道进行转码，-acodec 指定音频编码，-ab 指定音频比特率，-ac 指定声道数，例如<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -<span class="selector-tag">i</span> out<span class="selector-class">.ogv</span> -s <span class="number">640</span>x480 -<span class="selector-tag">b</span> <span class="number">500</span>k -vcodec h264 -r <span class="number">29.97</span> -acodec libfaac -ab <span class="number">48</span>k -ac <span class="number">2</span> out.mp4</span><br></pre></td></tr></table></figure></p><h3 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h3><p>用 -ss 和 -t 选项， 从第 30 秒开始，向后截取 10 秒的视频，并保存：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -<span class="selector-tag">i</span> <span class="selector-tag">input</span><span class="selector-class">.wmv</span> -ss <span class="number">00</span>:<span class="number">00</span>:<span class="number">30.0</span> -c copy -t <span class="number">00</span>:<span class="number">00</span>:<span class="number">10.0</span> output.wmv</span><br><span class="line">ffmpeg -<span class="selector-tag">i</span> <span class="selector-tag">input</span><span class="selector-class">.wmv</span> -ss <span class="number">30</span> -c copy -t <span class="number">10</span> output.wmv</span><br></pre></td></tr></table></figure></p><p>达成相同效果，也可以用 -ss 和 -to 选项， 从第 30 秒截取到第 40 秒：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -<span class="selector-tag">i</span> <span class="selector-tag">input</span><span class="selector-class">.wmv</span> -ss <span class="number">30</span> -c copy -to <span class="number">40</span> output.wmv</span><br></pre></td></tr></table></figure></p><p>值得注意的是，ffmpeg 为了加速，会使用关键帧技术， 所以有时剪切出来的结果在起止时间上未必准确。 通常来说，把 -ss 选项放在 -i 之前，会使用关键帧技术； 把 -ss 选项放在 -i 之后，则不使用关键帧技术。 如果要使用关键帧技术又要保留时间戳，可以加上 -copyts 选项：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ffmpeg</span> <span class="selector-tag">-ss</span> 00<span class="selector-pseudo">:01</span><span class="selector-pseudo">:00</span> <span class="selector-tag">-i</span> <span class="selector-tag">video</span><span class="selector-class">.mp4</span> <span class="selector-tag">-to</span> 00<span class="selector-pseudo">:02</span><span class="selector-pseudo">:00</span> <span class="selector-tag">-c</span> <span class="selector-tag">copy</span> <span class="selector-tag">-copyts</span> <span class="selector-tag">cut</span><span class="selector-class">.mp4</span></span><br></pre></td></tr></table></figure></p><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>把两个视频文件合并成一个。  </p><p>简单地使用 concat demuxer，示例：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat mylist.txt</span><br><span class="line">file <span class="string">'/path/to/file1'</span></span><br><span class="line">file <span class="string">'/path/to/file2'</span></span><br><span class="line">file <span class="string">'/path/to/file3'</span></span><br><span class="line"> </span><br><span class="line">$ ffmpeg -f concat -<span class="selector-tag">i</span> mylist<span class="selector-class">.txt</span> -c copy output</span><br></pre></td></tr></table></figure></p><p>更多时候，由于输入文件的多样性，需要转成中间格式再合成：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -<span class="selector-tag">i</span> input1<span class="selector-class">.avi</span> -qscale:v <span class="number">1</span> intermediate1.mpg</span><br><span class="line">ffmpeg -<span class="selector-tag">i</span> input2<span class="selector-class">.avi</span> -qscale:v <span class="number">1</span> intermediate2.mpg</span><br><span class="line">cat intermediate1<span class="selector-class">.mpg</span> intermediate2<span class="selector-class">.mpg</span> &gt; intermediate_all.mpg</span><br><span class="line">ffmpeg -<span class="selector-tag">i</span> intermediate_all<span class="selector-class">.mpg</span> -qscale:v <span class="number">2</span> output.avi</span><br></pre></td></tr></table></figure></p><h3 id="调整播放速度"><a href="#调整播放速度" class="headerlink" title="调整播放速度"></a>调整播放速度</h3><p>加速四倍：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -<span class="selector-tag">i</span> TheOrigin<span class="selector-class">.mp4</span> -vf  <span class="string">"setpts=0.25*PTS"</span> UpTheOrigin.mp4</span><br></pre></td></tr></table></figure></p><p>四倍慢速：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -<span class="selector-tag">i</span> TheOrigin<span class="selector-class">.mp4</span> -vf <span class="string">"setpts=4*PTS"</span> DownTheOrigin.mp4</span><br></pre></td></tr></table></figure></p><h3 id="帧率设置"><a href="#帧率设置" class="headerlink" title="帧率设置"></a>帧率设置</h3><p>使用-r选项<br>语法是：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -<span class="selector-tag">i</span> <span class="selector-tag">input</span> -r fps output</span><br></pre></td></tr></table></figure></p><p>例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -<span class="selector-tag">i</span> <span class="selector-tag">input</span><span class="selector-class">.avi</span> -r <span class="number">30</span> output.mp4</span><br></pre></td></tr></table></figure></p><h3 id="使用fps-filter"><a href="#使用fps-filter" class="headerlink" title="使用fps filter"></a>使用fps filter</h3><p>另一个设置帧率是用fps filter，特别是在filterchains使用时非常有用。<br>例如：修改输入文件的帧率到25<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -v <span class="keyword">clip</span>.mpg -vf fps=fps=<span class="number">25</span> <span class="keyword">clip</span>.webm</span><br></pre></td></tr></table></figure></p><h3 id="比特率设置"><a href="#比特率设置" class="headerlink" title="比特率设置"></a>比特率设置</h3><p>比特率也是一个决定音视频总体质量的参数。他决定每个时间单位处理的bit数。<br>设置比特率：  </p><p>比特率决定处理1s的编码流需要多少bits，设置用-b选项。区分音视频用-b:a和-b:v<br>例如：设置整体1.5Mbit每秒<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -<span class="selector-tag">i</span> file<span class="selector-class">.avi</span> -<span class="selector-tag">b</span> <span class="number">1.5</span>M file.mp4</span><br><span class="line"></span><br><span class="line">ffmpeg -<span class="selector-tag">i</span> <span class="selector-tag">input</span><span class="selector-class">.avi</span> -<span class="selector-tag">b</span>:v <span class="number">1500</span>K output.mp4</span><br></pre></td></tr></table></figure></p><h3 id="CBR设置"><a href="#CBR设置" class="headerlink" title="CBR设置"></a>CBR设置</h3><p>CBR设置一般用作直播流，比如视频会议。为输出设置CBR,有三个参数必须设置为同一个值。<br>bitrate(-b option), minimal rate(-minrate), maximal rate(-maxrate)。maximal rate需要设置-bufsize选项。例如设置CBR为0.5Mbit/s。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -<span class="selector-tag">i</span> <span class="keyword">in</span><span class="selector-class">.avi</span> -<span class="selector-tag">b</span> <span class="number">0.5</span>M -minrate <span class="number">0.5</span>M -maxrate <span class="number">0.5</span>M -bufsize <span class="number">1</span>M output.mkv</span><br></pre></td></tr></table></figure></p><h3 id="设置输出文件的最大size"><a href="#设置输出文件的最大size" class="headerlink" title="设置输出文件的最大size"></a>设置输出文件的最大size</h3><p>用-fs选项。<br>例如设置输出文件的最大的size为10M<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -<span class="selector-tag">i</span> <span class="selector-tag">input</span><span class="selector-class">.avi</span> -fs <span class="number">10</span>MB output.mp4</span><br></pre></td></tr></table></figure></p><h3 id="文件大小计算"><a href="#文件大小计算" class="headerlink" title="文件大小计算"></a>文件大小计算</h3><p>文件的大小是是音视频流大小的和。<br>视频流的大小的方程式是(除以8是由bits到bytes的转换):<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">video_size</span> = video_bitrate * time_in_seconds / <span class="number">8</span>;</span><br></pre></td></tr></table></figure></p><p>如果音频是解压缩的，计算公式是：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">audio_size</span> = smpaling_rate * bit_depth * channels * time_in_second / <span class="number">8</span>;</span><br></pre></td></tr></table></figure></p><p>例如：计算10分钟的视频， 1500kbits/s 视频比特率和 128kbits/s的音频比特率，用下面的计算方法：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file_size = video_size + audio_size;</span><br><span class="line">file_size = (video_bitrate + audio_bitrate) * time_in_seconds / <span class="number">8</span>;</span><br><span class="line">file_size = (<span class="number">1500</span> kbits/s + <span class="number">128</span>kbits/s) * <span class="number">600</span>s</span><br><span class="line">file_size = <span class="number">1628</span>kbits/s * <span class="number">600</span>s</span><br><span class="line">file_size = <span class="number">976800</span>kb = <span class="number">976800000</span> b / <span class="number">8</span> = <span class="number">122100000</span> B / <span class="number">1024</span> = <span class="number">119238.28125</span>KB</span><br><span class="line">file_size = <span class="number">119238.28125</span> KB / <span class="number">1024</span> = <span class="number">116.443634033203125</span>MB = <span class="number">116.44</span>M</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;转码和编辑视频&quot;&gt;&lt;a href=&quot;#转码和编辑视频&quot; class=&quot;headerlink&quot; title=&quot;转码和编辑视频&quot;&gt;&lt;/a&gt;转码和编辑视频&lt;/h2&gt;&lt;p&gt;今天用Android Studio（后面简称AS）里的模拟器给系统录屏，用来展示OpenGL可视化的东西，打算上传B站，后来发现AS只能保存webm格式和GIF格式的视频，并且文件体积巨大，视频图像也是顺时针旋转的。  &lt;/p&gt;
&lt;p&gt;没办法，只能找个视频编辑器进行转码和编辑，结果发现网上的视频转码工具基本粗制滥造，像Adobe PR这样的视频剪辑软件我也没必要下载，于是找到了ffmpeg（其实很早之前在树莓派上玩Linux的时候用过）。  &lt;/p&gt;
&lt;p&gt;我进入&lt;a href=&quot;http://ffmpeg.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ffmpeg官网&lt;/a&gt;下载了Win64版本，下载速度很快，下载下来就是一个压缩包，解压后就是工具本体了，不过它没有任何UI界面，在Windows下你只能进入bin目录，然后Shift+鼠标右键打开命令窗口，使用ffmpeg的指令进行操作。如下图，可以看到转码效率很高。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/8.PNG&quot; alt=&quot;&quot;&gt;&lt;br&gt;下面分析网上搜集的ffmpeg简单用法，可以进行很多基础的视频编辑。&lt;br&gt;
    
    </summary>
    
    
      <category term="实用工具" scheme="http://yoursite.com/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
      <category term="视频" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="剪辑" scheme="http://yoursite.com/tags/%E5%89%AA%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>对微积分运算推广的猜想</title>
    <link href="http://yoursite.com/2019/01/27/%E5%AF%B9%E5%BE%AE%E7%A7%AF%E5%88%86%E8%BF%90%E7%AE%97%E6%8E%A8%E5%B9%BF%E7%9A%84%E7%8C%9C%E6%83%B3/"/>
    <id>http://yoursite.com/2019/01/27/对微积分运算推广的猜想/</id>
    <published>2019-01-27T13:43:24.000Z</published>
    <updated>2019-01-29T03:58:39.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不自量力"><a href="#不自量力" class="headerlink" title="不自量力"></a>不自量力</h2><p>本人才疏学浅，数学功底不好，微积分也只是了解一点，竟然想研究这样的高深理论？算了，不过是一个猜想而已，这里把它分享给大家，好让大家了解一下。</p><h2 id="解析延拓"><a href="#解析延拓" class="headerlink" title="解析延拓"></a>解析延拓</h2><p>要知道，在百年来数学的不断发展中，数字这个集合越来越大，从自然数，正整数，整数到有理数，实数，复数。这就是延拓，运算使得数字拥有了价值，运算自然也被延拓了。比如在古代，分数这个二元运算的分子与分母只能是正整数 ，而现在，它的定义域被拓展到了复数。再比如，很早之前 $x^a,a^x,sin(x),ln(x)$ 等等初等函数的定义域是实数或者正实数，而现在，它们可以被定义在复数域，并且是唯一的，这就是解析延拓。<br><a id="more"></a><br>最经典的是一元运算阶乘， $0!=1,1!=1,n!=n\times(n-1)!$ 这是一个定义在非负整数上的函数，而它可以被推广到实数域甚至复数域。阶乘函数的解析延拓就是 $\Gamma(x)$ ，当 $n$ 为非负整数时，有 $n!=\Gamma(n+1)$ ，$\Gamma(x)$ 也叫作欧拉第二积分，它在高数上有极其重要的应用，它的定义是 $\Gamma(x)=\int_R t^{x-1}e^{-t}dt$ 。</p><h2 id="将求导运算延拓到实数"><a href="#将求导运算延拓到实数" class="headerlink" title="将求导运算延拓到实数"></a>将求导运算延拓到实数</h2><h3 id="先研究最简单的幂函数"><a href="#先研究最简单的幂函数" class="headerlink" title="先研究最简单的幂函数"></a>先研究最简单的幂函数</h3><script type="math/tex; mode=display">f(x)=x^\alpha</script><p>我们对它求 $n$ 阶导数，$n \in \mathbb{N}$</p><script type="math/tex; mode=display">f^{(1)}(x)=\alpha x^{\alpha-1} \\f^{(2)}(x)=\alpha (\alpha-1) x^{\alpha-2} \\\dots \\f^{(n)}(x)=\alpha (\alpha-1) \dots (\alpha-n+1) x^{\alpha-n} \\</script><p>左右乘一个 $(\alpha-n)!$得到</p><script type="math/tex; mode=display">(\alpha-n)!f^{(n)}(x)=\alpha !x^{\alpha-n}</script><p>故有</p><script type="math/tex; mode=display">f^{(n)}(x)=\frac{\alpha !}{(\alpha-n) !}x^{\alpha-n}</script><p>考虑到我们的目的是延拓求导，也就是把 $n$ 的取值从 $n \in \mathbb{N}$ 变成 $n \in \mathbb{R}$，所以我们把 $\alpha!$ 替换成 $\Gamma(\alpha+1)$ 得到  </p><script type="math/tex; mode=display">f^{(n)}(x)=\frac{\Gamma(\alpha+1)}{\Gamma(\alpha-n+1)}x^{\alpha-n}</script><p>因为我们并不确定这种变换到底还是不是求导，所以我们定义一个算子 $D^n$ ，使得 $(D^nf)(x)=f^{(n)}(x)$ ，于是有  </p><script type="math/tex; mode=display">(D^n)f(x)=\frac{\Gamma(\alpha+1)}{\Gamma(\alpha-n+1)}x^{\alpha-n}</script><p>要知道，数学有个很美丽之处就是连续，现在 $n$ 连续了，我们尝试把 $f(x)=\frac{1}{2}x^2$ 在算子 $D^n,n \in [0,2]$ 的变换下的动画绘制出来，如下图<br><img src="/images/blog/5.gif" alt=""></p><h3 id="对于积分"><a href="#对于积分" class="headerlink" title="对于积分"></a>对于积分</h3><p>我们知道求导和积分实际上是一对逆运算。特别的，如果函数 $f(x)$ 在定义域上连续且可导，那么在其定义域上有  </p><script type="math/tex; mode=display">\int{\frac{df(x)}{dx}}dx=f(x)</script><p>以前面所猜想的幂函数为例子， $f(x)=x^\alpha$ 的 $-1$ 次导数，实际上就是它的积分。如果我们定义算子 $J$ 使得 $(Jf)(x)=\int{f(x)dx}$ ，我们可以得出这样一个特殊结论。<br>若 $f(x) 是幂函数$ ，则有  </p><script type="math/tex; mode=display">(D^nf)(x)=(J^{-n}f)(x)</script><p>我们尝试把 $f(x)=x^3$ 在算子 $D^n,n \in [-5,5]$ 的变换下的动画绘制出来，如下图</p><p><img src="/images/blog/7.gif" alt=""><br>可以看出， $(D^{-1}f)(x)$ 确实是 $f(x)$ 的积分。  </p><h3 id="正弦函数的一个例子"><a href="#正弦函数的一个例子" class="headerlink" title="正弦函数的一个例子"></a>正弦函数的一个例子</h3><p>猜想</p><script type="math/tex; mode=display">(D^nsin)(x)=(J^{-n}sin)(x)=cos(\frac{n\pi}{2})sin(x)+sin(\frac{n\pi}{2})cos(x)=sin(x+\frac{n\pi}{2})</script><p>变换的动画如下图</p><p><img src="/images/blog/6.gif" alt=""></p><h2 id="算子的定义"><a href="#算子的定义" class="headerlink" title="算子的定义"></a>算子的定义</h2><p>这个等式参照维基百科  </p><h3 id="n阶求导算子D"><a href="#n阶求导算子D" class="headerlink" title="n阶求导算子D"></a>n阶求导算子D</h3><script type="math/tex; mode=display">{\displaystyle (D^nf)(x)={\frac {1}{\Gamma (1-n )}}{\frac {d}{dx}}\int _{0}^{x}{\frac {f(t)}{(x-t)^{n }}}\,dt}</script><h3 id="α重积分算子J"><a href="#α重积分算子J" class="headerlink" title="α重积分算子J"></a>α重积分算子J</h3><script type="math/tex; mode=display">(J^{\alpha }f)(x)={1 \over \Gamma (\alpha )}\int _{0}^{x}(x-t)^{\alpha -1}f(t)\;dt</script><h2 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h2><p>维基百科有关于分数阶微积分的详细介绍：<br><a href="https://en.m.wikipedia.org/wiki/Fractional_calculus" target="_blank" rel="noopener">https://en.m.wikipedia.org/wiki/Fractional_calculus</a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本人只是猜想和整理，不代表以上内容我都完全搞懂了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;不自量力&quot;&gt;&lt;a href=&quot;#不自量力&quot; class=&quot;headerlink&quot; title=&quot;不自量力&quot;&gt;&lt;/a&gt;不自量力&lt;/h2&gt;&lt;p&gt;本人才疏学浅，数学功底不好，微积分也只是了解一点，竟然想研究这样的高深理论？算了，不过是一个猜想而已，这里把它分享给大家，好让大家了解一下。&lt;/p&gt;
&lt;h2 id=&quot;解析延拓&quot;&gt;&lt;a href=&quot;#解析延拓&quot; class=&quot;headerlink&quot; title=&quot;解析延拓&quot;&gt;&lt;/a&gt;解析延拓&lt;/h2&gt;&lt;p&gt;要知道，在百年来数学的不断发展中，数字这个集合越来越大，从自然数，正整数，整数到有理数，实数，复数。这就是延拓，运算使得数字拥有了价值，运算自然也被延拓了。比如在古代，分数这个二元运算的分子与分母只能是正整数 ，而现在，它的定义域被拓展到了复数。再比如，很早之前 $x^a,a^x,sin(x),ln(x)$ 等等初等函数的定义域是实数或者正实数，而现在，它们可以被定义在复数域，并且是唯一的，这就是解析延拓。&lt;br&gt;
    
    </summary>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="微积分" scheme="http://yoursite.com/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
      <category term="猜想" scheme="http://yoursite.com/tags/%E7%8C%9C%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>一张图形象理解高数中的中值定理</title>
    <link href="http://yoursite.com/2019/01/27/%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%BD%A2%E8%B1%A1%E7%90%86%E8%A7%A3%E9%AB%98%E6%95%B0%E4%B8%AD%E7%9A%84%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86/"/>
    <id>http://yoursite.com/2019/01/27/一张图形象理解高数中的中值定理/</id>
    <published>2019-01-27T12:09:09.000Z</published>
    <updated>2019-01-27T16:07:33.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中值定理"><a href="#中值定理" class="headerlink" title="中值定理"></a>中值定理</h2><p>中值定理在高数的微积分中运用极其广泛。<br><a id="more"></a><br><img src="/images/blog/4.jpg" alt=""></p><p><em>这张图分享自知乎用户<a href="https://www.zhihu.com/people/xilaganlan/activities" target="_blank" rel="noopener">快来签到小助手</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;中值定理&quot;&gt;&lt;a href=&quot;#中值定理&quot; class=&quot;headerlink&quot; title=&quot;中值定理&quot;&gt;&lt;/a&gt;中值定理&lt;/h2&gt;&lt;p&gt;中值定理在高数的微积分中运用极其广泛。&lt;br&gt;
    
    </summary>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="微积分" scheme="http://yoursite.com/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>建立个人Blog和使用LaTeX写文章</title>
    <link href="http://yoursite.com/2019/01/24/%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BAblog%E5%92%8C%E4%BD%BF%E7%94%A8Latex%E5%86%99%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2019/01/24/建立个人blog和使用Latex写文章/</id>
    <published>2019-01-24T07:30:11.000Z</published>
    <updated>2019-01-24T13:40:16.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于建站"><a href="#关于建站" class="headerlink" title="关于建站"></a>关于建站</h2><p>感谢开源的世界，这个博客的二级域名和文件存储都靠GitHub，这个博客的引擎靠的是Hexo，而这个博客的主题是开源的NexT，如果没有他们，我不可能搭建起这个博客。<br>GitHub：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br>Hexo：<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a><br>NexT主题：<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a><br>虽然耗了我整整一天时间，但总的来说，这次建站非常轻松，也是多亏了开源世界。<br><a id="more"></a><br><img src="https://raw.githubusercontent.com/HK-SHAO/HK-SHAO.github.io/master/images/blog/2.PNG" alt="">   </p><h2 id="关于-LaTeX"><a href="#关于-LaTeX" class="headerlink" title="关于 LaTeX"></a>关于 LaTeX</h2><p>在博客里写文章，用的是MarkDown和 $\LaTeX$ ， $\LaTeX$ 主要是用于书写数学式子的，说到这个 $\LaTeX$ ，它是全世界非常著名的文字排版系统，尤其是对数学式子的排版，大量学术论文的排版都靠它，理工的大学生应该会用到它来写论文。<br><img src="https://raw.githubusercontent.com/HK-SHAO/HK-SHAO.github.io/master/images/blog/1.PNG" alt=""><br>说个实话吧，在电脑上书写数学式子太累了，可能是我还不熟练吧。<br>以后我的blog都会发布在这个网站上，大家可以收藏，感谢支持！  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于建站&quot;&gt;&lt;a href=&quot;#关于建站&quot; class=&quot;headerlink&quot; title=&quot;关于建站&quot;&gt;&lt;/a&gt;关于建站&lt;/h2&gt;&lt;p&gt;感谢开源的世界，这个博客的二级域名和文件存储都靠GitHub，这个博客的引擎靠的是Hexo，而这个博客的主题是开源的NexT，如果没有他们，我不可能搭建起这个博客。&lt;br&gt;GitHub：&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/&lt;/a&gt;&lt;br&gt;Hexo：&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hexo.io/&lt;/a&gt;&lt;br&gt;NexT主题：&lt;a href=&quot;https://github.com/theme-next/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/theme-next/hexo-theme-next&lt;/a&gt;&lt;br&gt;虽然耗了我整整一天时间，但总的来说，这次建站非常轻松，也是多亏了开源世界。&lt;br&gt;
    
    </summary>
    
    
      <category term="公告" scheme="http://yoursite.com/tags/%E5%85%AC%E5%91%8A/"/>
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的不等式结论</title>
    <link href="http://yoursite.com/2019/01/24/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%B8%8D%E7%AD%89%E5%BC%8F%E7%BB%93%E8%AE%BA/"/>
    <id>http://yoursite.com/2019/01/24/一个简单的不等式结论/</id>
    <published>2019-01-24T04:02:08.000Z</published>
    <updated>2019-01-24T13:40:16.316Z</updated>
    
    <content type="html"><![CDATA[<p>这个不等式结论是19/1/13写关于圆锥曲线求线段比值最大值时发现的。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>设 $m,n,a,b&gt;0$ </p><p>若 $x&gt;y$ 则  </p><script type="math/tex; mode=display">\frac{ma^2+nb^2+xab}{ma^2+nb^2+yab} \leqslant \frac{2\sqrt{mn}+x}{2\sqrt{mn}+y}</script><p>若 $x&lt;y$ 则  </p><script type="math/tex; mode=display">\frac{ma^2+nb^2+xab}{ma^2+nb^2+yab} \geqslant \frac{2\sqrt{mn}+x}{2\sqrt{mn}+y}</script><a id="more"></a><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><script type="math/tex; mode=display">\frac{ma^2+nb^2+xab}{ma^2+nb^2+yab} = 1+\frac{x-y}{\frac{ma}{b}+\frac{nb}{a}+y}</script><p>然后分类讨论 $x$ 与 $y$ 的大小关系，利用基本不等式可以得到以上结论。  </p><h2 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h2><p>若实数 $x,y$ 满足 $4x^2-5xy+4y^2=5$ ，则 $x^2+y^2$ 的最大值为多少？</p><p>由以上结论可得  </p><script type="math/tex; mode=display">\frac{4x^2+4y^2}{4x^2+4y^2-5xy} \leqslant \frac{2\sqrt{4 \times 4}+0}{2\sqrt{4 \times 4}-5} = \frac{8}{3}</script><p>即  </p><script type="math/tex; mode=display">\frac{4(x^2+y^2)}{5} \leqslant \frac{8}{3}</script><p>故  </p><script type="math/tex; mode=display">x^2+y^2 \leqslant \frac{10}{3}</script><h2 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h2><p>若实数 $x,y$ 满足 $x^2+y^2+xy=1$ ，则 $x+y$ 的最大值为多少？  </p><p>由以上结论可得  </p><script type="math/tex; mode=display">x+y \leqslant  \sqrt{x^2+y^2+2xy} = \sqrt{\frac{x^2+y^2+2xy}{x^2+y^2+xy}} \leqslant \sqrt{\frac{2+2}{2+1}}=\frac{2\sqrt{3}}{3}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个不等式结论是19/1/13写关于圆锥曲线求线段比值最大值时发现的。&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;设 $m,n,a,b&amp;gt;0$ &lt;/p&gt;
&lt;p&gt;若 $x&amp;gt;y$ 则  &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\frac{ma^2+nb^2+xab}{ma^2+nb^2+yab} \leqslant \frac{2\sqrt{mn}+x}{2\sqrt{mn}+y}&lt;/script&gt;&lt;p&gt;若 $x&amp;lt;y$ 则  &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\frac{ma^2+nb^2+xab}{ma^2+nb^2+yab} \geqslant \frac{2\sqrt{mn}+x}{2\sqrt{mn}+y}&lt;/script&gt;
    
    </summary>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="不等式" scheme="http://yoursite.com/tags/%E4%B8%8D%E7%AD%89%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>猪的晚餐</title>
    <link href="http://yoursite.com/2018/10/02/%E7%8C%AA%E7%9A%84%E6%99%9A%E9%A4%90/"/>
    <id>http://yoursite.com/2018/10/02/猪的晚餐/</id>
    <published>2018-10-02T02:23:53.000Z</published>
    <updated>2019-01-25T06:50:41.541Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/HK-SHAO/HK-SHAO.github.io/master/images/blog/3.PNG" alt="">  </p><p>&emsp;&emsp;一座酒店座落在临海的悬崖边，夜晚只有一间房间的灯是亮的，房间内明亮庄雅，有几头猪坐在餐椅上，他们穿戴整洁，彬彬有礼，正优雅的享受着餐桌上的美味。这时，一只瘦弱的黑猫跑到一头猪的身下，凄惨的叫着，猪看了他一眼，将盘子中的剩菜丢给了黑猫，黑猫立马将剩菜藏了起来，独自享受。<br><a id="more"></a><br>&emsp;&emsp;当餐桌上的菜肴越来越少，一个厨子推着一个机器走了过来，他将房间内的花瓶、壁画拿了下来，丢进机器内，机器冒着黑烟，美味佳肴就从机器另一边的传送带出来。厨子将这些菜肴送上餐桌，餐桌前的猪就这样一直的吃着。越来越多瘦弱的猫过来了，他们都在猪的身下凄惨的叫着，一头猪丢下几个丸子在地上，瘦弱的猫们便奋力争抢，甚至打斗起来。</p><p>&emsp;&emsp;当房间里珍贵的物品都被机器消耗后，厨子做出的菜肴越来越少，餐桌前的猪们坐不住了，他们显得没那么优雅了，甚至连餐桌上的礼仪都忘记了。房间里的猫们饿坏了，他们围着餐桌转圈，但没有猪理他们。猫们凄惨的叫着，一头猪拿出一个玩具老鼠，上好发条放在地上，玩具老鼠在地上跑吸引了很多猫的注意，猪们不停地吃着。</p><p>&emsp;&emsp;房间里的物品差不多被机器消耗完了，厨子几乎做不出多少菜肴了，餐桌前的猪彻底按捺不住了，他们开始急躁的在餐桌上争抢菜肴，甚至有的直接把菜盘归自己所有，他们便开始争抢菜盘，菜盘里有一个丸子掉在地上，丸子穿过桌布滚到了餐桌底下，一只猫追随丸子，穿过桌布，钻进餐桌底下，当他看到猪们的腿被铁链复杂的缠绕在一起时，铁链上的锁头化为巨蟒的模样，将这只猫吞噬了。</p><p>&emsp;&emsp;房间的墙壁都被厨子扒下，塞进机器做菜肴了，可是从机器传送带出来的只有空盘子。餐桌前的猪们都在用餐具敲桌子，以示厨子赶快上菜，但厨子无奈地摇了摇头。猪们急了，他们开始争抢桌上的空盘子，然后不顾一切的舔着空盘子，甚至把空盘子咬碎吃掉，猫们也很急，他们使劲撩着桌布，甚至跳到餐桌上，与猪争抢菜盘子。</p><p>&emsp;&emsp;猪们见状非常愤怒，拿起猫就把他往地上摔，猫们反抗着，集体跳到桌上，化为一只猛虎，愤怒的嚎叫，然后扑向一个穿着法袍的猪，撕扯咬碎，鲜血溅到任何一个角落，地上一片血肉模糊，其他的猪同样遭到这样的命运。血腥过后，猛虎困了，在餐桌上的血泊中睡着了。</p><p>&emsp;&emsp;厨子抱着头，恐惧的躲在机器后面，他见猛虎睡着了，拿起锋利的匕首，悄悄走到猛虎面前，向猛虎脖子刺去，猛虎一命呜呼，厨子划开猛虎的肚皮，从中拿出了几只小猫，离开这个空旷而又破烂的房间，走进了一个新的房间，房间内又是那么明亮庄雅，厨子放下小猫们，小猫们走向餐桌，化为几只猪，坐在餐桌上，餐桌上都是美味佳肴，厨子拿出一个箱子，将箱子中的餐具分给了猪们。</p><p>&emsp;&emsp;这几头猪坐在餐椅上，他们穿戴整洁，彬彬有礼，正优雅的享受着餐桌上的美味……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/HK-SHAO/HK-SHAO.github.io/master/images/blog/3.PNG&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;一座酒店座落在临海的悬崖边，夜晚只有一间房间的灯是亮的，房间内明亮庄雅，有几头猪坐在餐椅上，他们穿戴整洁，彬彬有礼，正优雅的享受着餐桌上的美味。这时，一只瘦弱的黑猫跑到一头猪的身下，凄惨的叫着，猪看了他一眼，将盘子中的剩菜丢给了黑猫，黑猫立马将剩菜藏了起来，独自享受。&lt;br&gt;
    
    </summary>
    
    
      <category term="杂文" scheme="http://yoursite.com/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>利用OpenGL实现规划寻找目标函数极值可视化</title>
    <link href="http://yoursite.com/2018/10/01/%E5%88%A9%E7%94%A8OpenGL%E5%AE%9E%E7%8E%B0%E8%A7%84%E5%88%92%E5%AF%BB%E6%89%BE%E7%9B%AE%E6%A0%87%E5%87%BD%E6%95%B0%E6%9E%81%E5%80%BC%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://yoursite.com/2018/10/01/利用OpenGL实现规划寻找目标函数极值可视化/</id>
    <published>2018-10-01T14:21:40.000Z</published>
    <updated>2019-01-24T13:40:16.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近一段时间在学校学完了简单的线性规划，今天放假闲着于是就花了一点时间把之前用OpenGL实现的函数图像绘制修改成了线性规划的绘图，并且能实现目标函数极值寻找的可视化。<br><img src="https://upload-images.jianshu.io/upload_images/15006683-4591d5f3a5bb75bd.gif?imageMogr2/auto-orient/strip" alt=""></p><p>如图这是实现了寻找 $z = x^2 + y^2$ 的最大值的效果<br><a id="more"></a><br><img src="https://upload-images.jianshu.io/upload_images/15006683-6d9f06aac5bfb5c3.gif?imageMogr2/auto-orient/strip" alt=""></p><p>这是实现了寻找 $z = 2x + y$ 的最大值。  </p><p><img src="https://upload-images.jianshu.io/upload_images/15006683-2b694e6f2ff5886f.gif?imageMogr2/auto-orient/strip" alt=""></p><p>当然，非线性的规划也是很容易的，这是寻找 $z = x^3 + y^2$ 的最大值。<br><img src="https://upload-images.jianshu.io/upload_images/15006683-7c058e47e786c547.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Func函数定义你要绘制的二元不等式组，Target函数定义你要寻找极值的目标函数，Color函数一般不用修改，具体我没时间细说了。  </p><h2 id="演示地址"><a href="#演示地址" class="headerlink" title="演示地址"></a>演示地址</h2><p>（非）线性规划：<br><a href="https://www.shadertoy.com/view/Mt3fz8" target="_blank" rel="noopener">https://www.shadertoy.com/view/Mt3fz8</a><br>函数图像绘制：<br> <a href="https://www.shadertoy.com/view/llcfR8" target="_blank" rel="noopener">https://www.shadertoy.com/view/llcfR8</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;最近一段时间在学校学完了简单的线性规划，今天放假闲着于是就花了一点时间把之前用OpenGL实现的函数图像绘制修改成了线性规划的绘图，并且能实现目标函数极值寻找的可视化。&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15006683-4591d5f3a5bb75bd.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如图这是实现了寻找 $z = x^2 + y^2$ 的最大值的效果&lt;br&gt;
    
    </summary>
    
    
      <category term="程序&amp;算法" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F-%E7%AE%97%E6%B3%95/"/>
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>如何比较整点的大小（排序）？</title>
    <link href="http://yoursite.com/2018/09/30/%E5%A6%82%E4%BD%95%E6%AF%94%E8%BE%83%E6%95%B4%E7%82%B9%E7%9A%84%E5%A4%A7%E5%B0%8F%EF%BC%88%E6%8E%92%E5%BA%8F%EF%BC%89%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/09/30/如何比较整点的大小（排序）？/</id>
    <published>2018-09-30T10:13:52.000Z</published>
    <updated>2019-01-26T10:15:47.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h2><p>当我知道复数是无法比较大小的时候，我就怀疑这个命题了，如果我能从复数映射到实数，并且从实数映射到复数：  </p><script type="math/tex; mode=display">\mathbb{C}\rightarrow\mathbb{R}\\ \mathbb{R}\rightarrow\mathbb{C}</script><p>也就是任意的复数都有一个实数与之一一对应，那我就可以利用实数的性质将所有复数进行排序了，这就可以比较复数大小了。我们知道复数可以与平面上的点一一对应，经过我的思考，我想了一个办法，利用等速螺线：  </p><p><img src="https://s2.ax1x.com/2019/01/26/knLR0S.jpg" alt=""><br><a id="more"></a><br>如图，从原点出发，沿着螺旋线运动，我们用不等号做记号，排序先到达的点和后到达的点，如图是先到达 $A$ 点，后到达 $B$ 点，也就是 $A&lt;B$ ，这样我就可以将螺旋线上的所有点排序了。  </p><p>但当我仔细思考，平面上点是稠密的，如果我想排序所有的点，那螺旋线就得无限密集，这显然是做不到的。  </p><p><img src="https://s2.ax1x.com/2019/01/26/knLhkQ.jpg" alt="">  </p><p>我又开始思考，既然平面上的所有点无法排序，那平面上的整点能否排序呢？<br>我第一时间想到的当然还是螺旋，不过是方形的螺旋：  </p><p><img src="https://s2.ax1x.com/2019/01/26/knL2m8.jpg" alt="">  </p><p>如图，这样我就可以用方形的螺旋线顺次将平面内所有的整点连接，从原点出发，按照先后顺序将所有的整点映射到整数（整数就是从原点出发沿着方形螺旋线运动的路程）。如图 $A (0, 0)\rightarrow 0 ， B (1, 0) \rightarrow 1 ， E (-1, -1) \rightarrow 6$ 。所有的整数与平面上的整点一一对应，也就可以将所有整点排序了，$D$ 在 $E$ 的前面，这里可以用记号表示 $D&lt;E$ ，也就是 $(-1,1)&lt;(-1,-1)$ 。  </p><p>如果整点用复数 $x+yi$ 表示，整数用 $z$ 表示，其中 $x,y,z\in\mathbb{Z}$ ，那么函数 $f(x+yi)=z$ 和其反函数 $f^{-1}(z)=x+yi$ 的映射关系是什么呢？如何用表达式表示它们呢？  </p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>As your wish:<br><img src="https://s2.ax1x.com/2019/01/26/knLWTg.jpg" alt="">  </p><p>points on x-axes:  </p><script type="math/tex; mode=display">f_x(n)=4 n^2-\left| n\right| -2 n</script><p>points on y-axes:  </p><script type="math/tex; mode=display">f_y(n)=4 n^2+\left| n\right| -2 n</script><p><br>  </p><script type="math/tex; mode=display">x+yi\rightarrow f_{\max(x,y)}(\max(x,y))\mp\min(x,y)</script><p>The inverse function will be more complicated:  </p><script type="math/tex; mode=display">x_n=\sum _{i=1}^n \sin \left(\frac{ \pi}{2}  (\left\lfloor \sqrt{4 i-3}\right\rfloor  \bmod 4)\right)</script><script type="math/tex; mode=display">y_n=-\sum _{i=1}^n \cos \left(\frac{ \pi}{2}  (\left\lfloor \sqrt{4 i-3}\right\rfloor  \bmod 4)\right)</script><script type="math/tex; mode=display">n\rightarrow (x_n,y_n)</script><p><img src="https://s2.ax1x.com/2019/01/26/knL4Yj.jpg" alt=""> </p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>解答来自知乎   <a href="https://www.zhihu.com/question/296719713/answer/501579029" target="_blank" rel="noopener">https://www.zhihu.com/question/296719713/answer/501579029</a> —— 酱紫君</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;提问&quot;&gt;&lt;a href=&quot;#提问&quot; class=&quot;headerlink&quot; title=&quot;提问&quot;&gt;&lt;/a&gt;提问&lt;/h2&gt;&lt;p&gt;当我知道复数是无法比较大小的时候，我就怀疑这个命题了，如果我能从复数映射到实数，并且从实数映射到复数：  &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\mathbb{C}\rightarrow\mathbb{R}\\ \mathbb{R}\rightarrow\mathbb{C}&lt;/script&gt;&lt;p&gt;也就是任意的复数都有一个实数与之一一对应，那我就可以利用实数的性质将所有复数进行排序了，这就可以比较复数大小了。我们知道复数可以与平面上的点一一对应，经过我的思考，我想了一个办法，利用等速螺线：  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/01/26/knLR0S.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="程序&amp;算法" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F-%E7%AE%97%E6%B3%95/"/>
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="Mathematica" scheme="http://yoursite.com/tags/Mathematica/"/>
    
  </entry>
  
</feed>
