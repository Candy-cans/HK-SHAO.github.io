<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HK-SHAO</title>
  
  <subtitle>Shao&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-27T16:14:35.837Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王家晔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对微积分运算推广的猜想</title>
    <link href="http://yoursite.com/2019/01/27/%E5%AF%B9%E5%BE%AE%E7%A7%AF%E5%88%86%E8%BF%90%E7%AE%97%E6%8E%A8%E5%B9%BF%E7%9A%84%E7%8C%9C%E6%83%B3/"/>
    <id>http://yoursite.com/2019/01/27/对微积分运算推广的猜想/</id>
    <published>2019-01-27T13:43:24.000Z</published>
    <updated>2019-01-27T16:14:35.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不自量力"><a href="#不自量力" class="headerlink" title="不自量力"></a>不自量力</h2><p>本人才疏学浅，数学功底不好，微积分也只是了解一点，竟然想研究这样的高深理论？算了，不过是一个猜想而已，这里把它分享给大家，好让大家了解一下。</p><h2 id="解析延拓"><a href="#解析延拓" class="headerlink" title="解析延拓"></a>解析延拓</h2><p>要知道，在百年来数学的不断发展中，数字这个集合越来越大，从自然数，正整数，整数到有理数，实数，复数。这就是延拓，运算使得数字拥有了价值，运算自然也被延拓了。比如在古代，分数这个二元运算的分子与分母只能是正整数 ，而现在，它的定义域被拓展到了复数。再比如，很早之前 $x^a,a^x,sin(x),ln(x)$ 等等初等函数的定义域是实数或者正实数，而现在，它们可以被定义在复数域，并且是唯一的，这就是解析延拓。  </p><p>最经典的是一元运算阶乘， $0!=1,1!=1,n!=n\times(n-1)!$ 这是一个定义在非负整数上的函数，而它可以被推广到实数域甚至复数域。阶乘函数的解析延拓就是 $\Gamma(x)$ ，当 $n$ 为非负整数时，有 $n!=\Gamma(n+1)$ ，$\Gamma(x)$ 也叫作欧拉第二积分，它在高数上有极其重要的应用，它的定义是 $\Gamma(x)=\int_R t^{x-1}e^{-t}dt$ 。<br><a id="more"></a></p><h2 id="将求导运算延拓到实数"><a href="#将求导运算延拓到实数" class="headerlink" title="将求导运算延拓到实数"></a>将求导运算延拓到实数</h2><h3 id="先研究最简单的幂函数"><a href="#先研究最简单的幂函数" class="headerlink" title="先研究最简单的幂函数"></a>先研究最简单的幂函数</h3><script type="math/tex; mode=display">f(x)=x^\alpha</script><p>我们对它求 $n$ 阶导数，$n \in \mathbb{N}$</p><script type="math/tex; mode=display">f^{(1)}(x)=\alpha x^{\alpha-1} \\f^{(2)}(x)=\alpha (\alpha-1) x^{\alpha-2} \\\dots \\f^{(n)}(x)=\alpha (\alpha-1) \dots (\alpha-n+1) x^{\alpha-n} \\</script><p>左右乘一个 $(\alpha-n)!$得到</p><script type="math/tex; mode=display">(\alpha-n)!f^{(n)}(x)=\alpha !x^{\alpha-n}</script><p>故有</p><script type="math/tex; mode=display">f^{(n)}(x)=\frac{\alpha !}{(\alpha-n) !}x^{\alpha-n}</script><p>考虑到我们的目的是延拓求导，也就是把 $n$ 的取值从 $n \in \mathbb{N}$ 变成 $n \in \mathbb{R}$，所以我们把 $\alpha!$ 替换成 $\Gamma(\alpha+1)$ 得到  </p><script type="math/tex; mode=display">f^{(n)}(x)=\frac{\Gamma(\alpha+1)}{\Gamma(\alpha-n+1)}x^{\alpha-n}</script><p>因为我们并不确定这种变换到底还是不是求导，所以我们定义一个算子 $D^n$ 有  </p><script type="math/tex; mode=display">D^nf(x)=\frac{\Gamma(\alpha+1)}{\Gamma(\alpha-n+1)}x^{\alpha-n}</script><p>要知道，数学有个很美丽之处就是连续，现在 $n$ 连续了，我们尝试把 $f(x)=\frac{1}{2}x^2$ 在算子 $D^n,n \in [0,2]$ 的变换下的动画绘制出来，如下图  </p><p><img src="/images/blog/5.gif" alt=""></p><h3 id="正弦函数的一个例子"><a href="#正弦函数的一个例子" class="headerlink" title="正弦函数的一个例子"></a>正弦函数的一个例子</h3><p>猜想</p><script type="math/tex; mode=display">D^nsin(x)=cos(\frac{n\pi}{2})sin(x)+sin(\frac{n\pi}{2})cos(x)</script><p>变换的动画如下图</p><p><img src="/images/blog/6.gif" alt=""></p><h2 id="算子的定义"><a href="#算子的定义" class="headerlink" title="算子的定义"></a>算子的定义</h2><p>这个等式参照维基百科  </p><h3 id="n阶求导算子D"><a href="#n阶求导算子D" class="headerlink" title="n阶求导算子D"></a>n阶求导算子D</h3><script type="math/tex; mode=display">{\displaystyle D^{n }f(x)={\frac {1}{\Gamma (1-n )}}{\frac {d}{dx}}\int _{0}^{x}{\frac {f(t)}{(x-t)^{n }}}\,dt}=\frac{1}{2\pi}\int_{-\infty}^{+\infty}dke^{ikx}(ik)^n\int_{-\infty}^{+\infty}dye^{-iky}f(y)</script><h3 id="α重积分算子J"><a href="#α重积分算子J" class="headerlink" title="α重积分算子J"></a>α重积分算子J</h3><script type="math/tex; mode=display">(J^{\alpha }f)(x)={1 \over \Gamma (\alpha )}\int _{0}^{x}(x-t)^{\alpha -1}f(t)\;dt</script><h2 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h2><p>维基百科有关于分数阶微积分的详细介绍：<br><a href="https://en.m.wikipedia.org/wiki/Fractional_calculus" target="_blank" rel="noopener">https://en.m.wikipedia.org/wiki/Fractional_calculus</a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本人只是猜想和整理，不代表以上内容我都完全搞懂了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;不自量力&quot;&gt;&lt;a href=&quot;#不自量力&quot; class=&quot;headerlink&quot; title=&quot;不自量力&quot;&gt;&lt;/a&gt;不自量力&lt;/h2&gt;&lt;p&gt;本人才疏学浅，数学功底不好，微积分也只是了解一点，竟然想研究这样的高深理论？算了，不过是一个猜想而已，这里把它分享给大家，好让大家了解一下。&lt;/p&gt;
&lt;h2 id=&quot;解析延拓&quot;&gt;&lt;a href=&quot;#解析延拓&quot; class=&quot;headerlink&quot; title=&quot;解析延拓&quot;&gt;&lt;/a&gt;解析延拓&lt;/h2&gt;&lt;p&gt;要知道，在百年来数学的不断发展中，数字这个集合越来越大，从自然数，正整数，整数到有理数，实数，复数。这就是延拓，运算使得数字拥有了价值，运算自然也被延拓了。比如在古代，分数这个二元运算的分子与分母只能是正整数 ，而现在，它的定义域被拓展到了复数。再比如，很早之前 $x^a,a^x,sin(x),ln(x)$ 等等初等函数的定义域是实数或者正实数，而现在，它们可以被定义在复数域，并且是唯一的，这就是解析延拓。  &lt;/p&gt;
&lt;p&gt;最经典的是一元运算阶乘， $0!=1,1!=1,n!=n\times(n-1)!$ 这是一个定义在非负整数上的函数，而它可以被推广到实数域甚至复数域。阶乘函数的解析延拓就是 $\Gamma(x)$ ，当 $n$ 为非负整数时，有 $n!=\Gamma(n+1)$ ，$\Gamma(x)$ 也叫作欧拉第二积分，它在高数上有极其重要的应用，它的定义是 $\Gamma(x)=\int_R t^{x-1}e^{-t}dt$ 。&lt;br&gt;
    
    </summary>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="微积分" scheme="http://yoursite.com/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
      <category term="猜想" scheme="http://yoursite.com/tags/%E7%8C%9C%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>一张图形象理解高数中的中值定理</title>
    <link href="http://yoursite.com/2019/01/27/%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%BD%A2%E8%B1%A1%E7%90%86%E8%A7%A3%E9%AB%98%E6%95%B0%E4%B8%AD%E7%9A%84%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86/"/>
    <id>http://yoursite.com/2019/01/27/一张图形象理解高数中的中值定理/</id>
    <published>2019-01-27T12:09:09.000Z</published>
    <updated>2019-01-27T16:07:33.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中值定理"><a href="#中值定理" class="headerlink" title="中值定理"></a>中值定理</h2><p>中值定理在高数的微积分中运用极其广泛。<br><a id="more"></a><br><img src="/images/blog/4.jpg" alt=""></p><p><em>这张图分享自知乎用户<a href="https://www.zhihu.com/people/xilaganlan/activities" target="_blank" rel="noopener">快来签到小助手</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;中值定理&quot;&gt;&lt;a href=&quot;#中值定理&quot; class=&quot;headerlink&quot; title=&quot;中值定理&quot;&gt;&lt;/a&gt;中值定理&lt;/h2&gt;&lt;p&gt;中值定理在高数的微积分中运用极其广泛。&lt;br&gt;
    
    </summary>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="微积分" scheme="http://yoursite.com/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>建立个人Blog和使用LaTeX写文章</title>
    <link href="http://yoursite.com/2019/01/24/%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BAblog%E5%92%8C%E4%BD%BF%E7%94%A8Latex%E5%86%99%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2019/01/24/建立个人blog和使用Latex写文章/</id>
    <published>2019-01-24T07:30:11.000Z</published>
    <updated>2019-01-24T13:40:16.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于建站"><a href="#关于建站" class="headerlink" title="关于建站"></a>关于建站</h2><p>感谢开源的世界，这个博客的二级域名和文件存储都靠GitHub，这个博客的引擎靠的是Hexo，而这个博客的主题是开源的NexT，如果没有他们，我不可能搭建起这个博客。<br>GitHub：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br>Hexo：<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a><br>NexT主题：<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a><br>虽然耗了我整整一天时间，但总的来说，这次建站非常轻松，也是多亏了开源世界。<br><a id="more"></a><br><img src="https://raw.githubusercontent.com/HK-SHAO/HK-SHAO.github.io/master/images/blog/2.PNG" alt="">   </p><h2 id="关于-LaTeX"><a href="#关于-LaTeX" class="headerlink" title="关于 LaTeX"></a>关于 LaTeX</h2><p>在博客里写文章，用的是MarkDown和 $\LaTeX$ ， $\LaTeX$ 主要是用于书写数学式子的，说到这个 $\LaTeX$ ，它是全世界非常著名的文字排版系统，尤其是对数学式子的排版，大量学术论文的排版都靠它，理工的大学生应该会用到它来写论文。<br><img src="https://raw.githubusercontent.com/HK-SHAO/HK-SHAO.github.io/master/images/blog/1.PNG" alt=""><br>说个实话吧，在电脑上书写数学式子太累了，可能是我还不熟练吧。<br>以后我的blog都会发布在这个网站上，大家可以收藏，感谢支持！  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于建站&quot;&gt;&lt;a href=&quot;#关于建站&quot; class=&quot;headerlink&quot; title=&quot;关于建站&quot;&gt;&lt;/a&gt;关于建站&lt;/h2&gt;&lt;p&gt;感谢开源的世界，这个博客的二级域名和文件存储都靠GitHub，这个博客的引擎靠的是Hexo，而这个博客的主题是开源的NexT，如果没有他们，我不可能搭建起这个博客。&lt;br&gt;GitHub：&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/&lt;/a&gt;&lt;br&gt;Hexo：&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hexo.io/&lt;/a&gt;&lt;br&gt;NexT主题：&lt;a href=&quot;https://github.com/theme-next/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/theme-next/hexo-theme-next&lt;/a&gt;&lt;br&gt;虽然耗了我整整一天时间，但总的来说，这次建站非常轻松，也是多亏了开源世界。&lt;br&gt;
    
    </summary>
    
    
      <category term="公告" scheme="http://yoursite.com/tags/%E5%85%AC%E5%91%8A/"/>
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的不等式结论</title>
    <link href="http://yoursite.com/2019/01/24/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%B8%8D%E7%AD%89%E5%BC%8F%E7%BB%93%E8%AE%BA/"/>
    <id>http://yoursite.com/2019/01/24/一个简单的不等式结论/</id>
    <published>2019-01-24T04:02:08.000Z</published>
    <updated>2019-01-24T13:40:16.316Z</updated>
    
    <content type="html"><![CDATA[<p>这个不等式结论是19/1/13写关于圆锥曲线求线段比值最大值时发现的。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>设 $m,n,a,b&gt;0$ </p><p>若 $x&gt;y$ 则  </p><script type="math/tex; mode=display">\frac{ma^2+nb^2+xab}{ma^2+nb^2+yab} \leqslant \frac{2\sqrt{mn}+x}{2\sqrt{mn}+y}</script><p>若 $x&lt;y$ 则  </p><script type="math/tex; mode=display">\frac{ma^2+nb^2+xab}{ma^2+nb^2+yab} \geqslant \frac{2\sqrt{mn}+x}{2\sqrt{mn}+y}</script><a id="more"></a><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><script type="math/tex; mode=display">\frac{ma^2+nb^2+xab}{ma^2+nb^2+yab} = 1+\frac{x-y}{\frac{ma}{b}+\frac{nb}{a}+y}</script><p>然后分类讨论 $x$ 与 $y$ 的大小关系，利用基本不等式可以得到以上结论。  </p><h2 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h2><p>若实数 $x,y$ 满足 $4x^2-5xy+4y^2=5$ ，则 $x^2+y^2$ 的最大值为多少？</p><p>由以上结论可得  </p><script type="math/tex; mode=display">\frac{4x^2+4y^2}{4x^2+4y^2-5xy} \leqslant \frac{2\sqrt{4 \times 4}+0}{2\sqrt{4 \times 4}-5} = \frac{8}{3}</script><p>即  </p><script type="math/tex; mode=display">\frac{4(x^2+y^2)}{5} \leqslant \frac{8}{3}</script><p>故  </p><script type="math/tex; mode=display">x^2+y^2 \leqslant \frac{10}{3}</script><h2 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h2><p>若实数 $x,y$ 满足 $x^2+y^2+xy=1$ ，则 $x+y$ 的最大值为多少？  </p><p>由以上结论可得  </p><script type="math/tex; mode=display">x+y \leqslant  \sqrt{x^2+y^2+2xy} = \sqrt{\frac{x^2+y^2+2xy}{x^2+y^2+xy}} \leqslant \sqrt{\frac{2+2}{2+1}}=\frac{2\sqrt{3}}{3}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个不等式结论是19/1/13写关于圆锥曲线求线段比值最大值时发现的。&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;设 $m,n,a,b&amp;gt;0$ &lt;/p&gt;
&lt;p&gt;若 $x&amp;gt;y$ 则  &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\frac{ma^2+nb^2+xab}{ma^2+nb^2+yab} \leqslant \frac{2\sqrt{mn}+x}{2\sqrt{mn}+y}&lt;/script&gt;&lt;p&gt;若 $x&amp;lt;y$ 则  &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\frac{ma^2+nb^2+xab}{ma^2+nb^2+yab} \geqslant \frac{2\sqrt{mn}+x}{2\sqrt{mn}+y}&lt;/script&gt;
    
    </summary>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="不等式" scheme="http://yoursite.com/tags/%E4%B8%8D%E7%AD%89%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>猪的晚餐</title>
    <link href="http://yoursite.com/2018/10/02/%E7%8C%AA%E7%9A%84%E6%99%9A%E9%A4%90/"/>
    <id>http://yoursite.com/2018/10/02/猪的晚餐/</id>
    <published>2018-10-02T02:23:53.000Z</published>
    <updated>2019-01-25T06:50:41.541Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/HK-SHAO/HK-SHAO.github.io/master/images/blog/3.PNG" alt="">  </p><p>&emsp;&emsp;一座酒店座落在临海的悬崖边，夜晚只有一间房间的灯是亮的，房间内明亮庄雅，有几头猪坐在餐椅上，他们穿戴整洁，彬彬有礼，正优雅的享受着餐桌上的美味。这时，一只瘦弱的黑猫跑到一头猪的身下，凄惨的叫着，猪看了他一眼，将盘子中的剩菜丢给了黑猫，黑猫立马将剩菜藏了起来，独自享受。<br><a id="more"></a><br>&emsp;&emsp;当餐桌上的菜肴越来越少，一个厨子推着一个机器走了过来，他将房间内的花瓶、壁画拿了下来，丢进机器内，机器冒着黑烟，美味佳肴就从机器另一边的传送带出来。厨子将这些菜肴送上餐桌，餐桌前的猪就这样一直的吃着。越来越多瘦弱的猫过来了，他们都在猪的身下凄惨的叫着，一头猪丢下几个丸子在地上，瘦弱的猫们便奋力争抢，甚至打斗起来。</p><p>&emsp;&emsp;当房间里珍贵的物品都被机器消耗后，厨子做出的菜肴越来越少，餐桌前的猪们坐不住了，他们显得没那么优雅了，甚至连餐桌上的礼仪都忘记了。房间里的猫们饿坏了，他们围着餐桌转圈，但没有猪理他们。猫们凄惨的叫着，一头猪拿出一个玩具老鼠，上好发条放在地上，玩具老鼠在地上跑吸引了很多猫的注意，猪们不停地吃着。</p><p>&emsp;&emsp;房间里的物品差不多被机器消耗完了，厨子几乎做不出多少菜肴了，餐桌前的猪彻底按捺不住了，他们开始急躁的在餐桌上争抢菜肴，甚至有的直接把菜盘归自己所有，他们便开始争抢菜盘，菜盘里有一个丸子掉在地上，丸子穿过桌布滚到了餐桌底下，一只猫追随丸子，穿过桌布，钻进餐桌底下，当他看到猪们的腿被铁链复杂的缠绕在一起时，铁链上的锁头化为巨蟒的模样，将这只猫吞噬了。</p><p>&emsp;&emsp;房间的墙壁都被厨子扒下，塞进机器做菜肴了，可是从机器传送带出来的只有空盘子。餐桌前的猪们都在用餐具敲桌子，以示厨子赶快上菜，但厨子无奈地摇了摇头。猪们急了，他们开始争抢桌上的空盘子，然后不顾一切的舔着空盘子，甚至把空盘子咬碎吃掉，猫们也很急，他们使劲撩着桌布，甚至跳到餐桌上，与猪争抢菜盘子。</p><p>&emsp;&emsp;猪们见状非常愤怒，拿起猫就把他往地上摔，猫们反抗着，集体跳到桌上，化为一只猛虎，愤怒的嚎叫，然后扑向一个穿着法袍的猪，撕扯咬碎，鲜血溅到任何一个角落，地上一片血肉模糊，其他的猪同样遭到这样的命运。血腥过后，猛虎困了，在餐桌上的血泊中睡着了。</p><p>&emsp;&emsp;厨子抱着头，恐惧的躲在机器后面，他见猛虎睡着了，拿起锋利的匕首，悄悄走到猛虎面前，向猛虎脖子刺去，猛虎一命呜呼，厨子划开猛虎的肚皮，从中拿出了几只小猫，离开这个空旷而又破烂的房间，走进了一个新的房间，房间内又是那么明亮庄雅，厨子放下小猫们，小猫们走向餐桌，化为几只猪，坐在餐桌上，餐桌上都是美味佳肴，厨子拿出一个箱子，将箱子中的餐具分给了猪们。</p><p>&emsp;&emsp;这几头猪坐在餐椅上，他们穿戴整洁，彬彬有礼，正优雅的享受着餐桌上的美味……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/HK-SHAO/HK-SHAO.github.io/master/images/blog/3.PNG&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;一座酒店座落在临海的悬崖边，夜晚只有一间房间的灯是亮的，房间内明亮庄雅，有几头猪坐在餐椅上，他们穿戴整洁，彬彬有礼，正优雅的享受着餐桌上的美味。这时，一只瘦弱的黑猫跑到一头猪的身下，凄惨的叫着，猪看了他一眼，将盘子中的剩菜丢给了黑猫，黑猫立马将剩菜藏了起来，独自享受。&lt;br&gt;
    
    </summary>
    
    
      <category term="杂文" scheme="http://yoursite.com/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>利用OpenGL实现规划寻找目标函数极值可视化</title>
    <link href="http://yoursite.com/2018/10/01/%E5%88%A9%E7%94%A8OpenGL%E5%AE%9E%E7%8E%B0%E8%A7%84%E5%88%92%E5%AF%BB%E6%89%BE%E7%9B%AE%E6%A0%87%E5%87%BD%E6%95%B0%E6%9E%81%E5%80%BC%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://yoursite.com/2018/10/01/利用OpenGL实现规划寻找目标函数极值可视化/</id>
    <published>2018-10-01T14:21:40.000Z</published>
    <updated>2019-01-24T13:40:16.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近一段时间在学校学完了简单的线性规划，今天放假闲着于是就花了一点时间把之前用OpenGL实现的函数图像绘制修改成了线性规划的绘图，并且能实现目标函数极值寻找的可视化。<br><img src="https://upload-images.jianshu.io/upload_images/15006683-4591d5f3a5bb75bd.gif?imageMogr2/auto-orient/strip" alt=""></p><p>如图这是实现了寻找 $z = x^2 + y^2$ 的最大值的效果<br><a id="more"></a><br><img src="https://upload-images.jianshu.io/upload_images/15006683-6d9f06aac5bfb5c3.gif?imageMogr2/auto-orient/strip" alt=""></p><p>这是实现了寻找 $z = 2x + y$ 的最大值。  </p><p><img src="https://upload-images.jianshu.io/upload_images/15006683-2b694e6f2ff5886f.gif?imageMogr2/auto-orient/strip" alt=""></p><p>当然，非线性的规划也是很容易的，这是寻找 $z = x^3 + y^2$ 的最大值。<br><img src="https://upload-images.jianshu.io/upload_images/15006683-7c058e47e786c547.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Func函数定义你要绘制的二元不等式组，Target函数定义你要寻找极值的目标函数，Color函数一般不用修改，具体我没时间细说了。  </p><h2 id="演示地址"><a href="#演示地址" class="headerlink" title="演示地址"></a>演示地址</h2><p>（非）线性规划：<br><a href="https://www.shadertoy.com/view/Mt3fz8" target="_blank" rel="noopener">https://www.shadertoy.com/view/Mt3fz8</a><br>函数图像绘制：<br> <a href="https://www.shadertoy.com/view/llcfR8" target="_blank" rel="noopener">https://www.shadertoy.com/view/llcfR8</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;最近一段时间在学校学完了简单的线性规划，今天放假闲着于是就花了一点时间把之前用OpenGL实现的函数图像绘制修改成了线性规划的绘图，并且能实现目标函数极值寻找的可视化。&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15006683-4591d5f3a5bb75bd.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如图这是实现了寻找 $z = x^2 + y^2$ 的最大值的效果&lt;br&gt;
    
    </summary>
    
    
      <category term="程序&amp;算法" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F-%E7%AE%97%E6%B3%95/"/>
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>如何比较整点的大小（排序）？</title>
    <link href="http://yoursite.com/2018/09/30/%E5%A6%82%E4%BD%95%E6%AF%94%E8%BE%83%E6%95%B4%E7%82%B9%E7%9A%84%E5%A4%A7%E5%B0%8F%EF%BC%88%E6%8E%92%E5%BA%8F%EF%BC%89%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/09/30/如何比较整点的大小（排序）？/</id>
    <published>2018-09-30T10:13:52.000Z</published>
    <updated>2019-01-26T10:15:47.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h2><p>当我知道复数是无法比较大小的时候，我就怀疑这个命题了，如果我能从复数映射到实数，并且从实数映射到复数：  </p><script type="math/tex; mode=display">\mathbb{C}\rightarrow\mathbb{R}\\ \mathbb{R}\rightarrow\mathbb{C}</script><p>也就是任意的复数都有一个实数与之一一对应，那我就可以利用实数的性质将所有复数进行排序了，这就可以比较复数大小了。我们知道复数可以与平面上的点一一对应，经过我的思考，我想了一个办法，利用等速螺线：  </p><p><img src="https://s2.ax1x.com/2019/01/26/knLR0S.jpg" alt=""><br><a id="more"></a><br>如图，从原点出发，沿着螺旋线运动，我们用不等号做记号，排序先到达的点和后到达的点，如图是先到达 $A$ 点，后到达 $B$ 点，也就是 $A&lt;B$ ，这样我就可以将螺旋线上的所有点排序了。  </p><p>但当我仔细思考，平面上点是稠密的，如果我想排序所有的点，那螺旋线就得无限密集，这显然是做不到的。  </p><p><img src="https://s2.ax1x.com/2019/01/26/knLhkQ.jpg" alt="">  </p><p>我又开始思考，既然平面上的所有点无法排序，那平面上的整点能否排序呢？<br>我第一时间想到的当然还是螺旋，不过是方形的螺旋：  </p><p><img src="https://s2.ax1x.com/2019/01/26/knL2m8.jpg" alt="">  </p><p>如图，这样我就可以用方形的螺旋线顺次将平面内所有的整点连接，从原点出发，按照先后顺序将所有的整点映射到整数（整数就是从原点出发沿着方形螺旋线运动的路程）。如图 $A (0, 0)\rightarrow 0 ， B (1, 0) \rightarrow 1 ， E (-1, -1) \rightarrow 6$ 。所有的整数与平面上的整点一一对应，也就可以将所有整点排序了，$D$ 在 $E$ 的前面，这里可以用记号表示 $D&lt;E$ ，也就是 $(-1,1)&lt;(-1,-1)$ 。  </p><p>如果整点用复数 $x+yi$ 表示，整数用 $z$ 表示，其中 $x,y,z\in\mathbb{Z}$ ，那么函数 $f(x+yi)=z$ 和其反函数 $f^{-1}(z)=x+yi$ 的映射关系是什么呢？如何用表达式表示它们呢？  </p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>As your wish:<br><img src="https://s2.ax1x.com/2019/01/26/knLWTg.jpg" alt="">  </p><p>points on x-axes:  </p><script type="math/tex; mode=display">f_x(n)=4 n^2-\left| n\right| -2 n</script><p>points on y-axes:  </p><script type="math/tex; mode=display">f_y(n)=4 n^2+\left| n\right| -2 n</script><p><br>  </p><script type="math/tex; mode=display">x+yi\rightarrow f_{\max(x,y)}(\max(x,y))\mp\min(x,y)</script><p>The inverse function will be more complicated:  </p><script type="math/tex; mode=display">x_n=\sum _{i=1}^n \sin \left(\frac{ \pi}{2}  (\left\lfloor \sqrt{4 i-3}\right\rfloor  \bmod 4)\right)</script><script type="math/tex; mode=display">y_n=-\sum _{i=1}^n \cos \left(\frac{ \pi}{2}  (\left\lfloor \sqrt{4 i-3}\right\rfloor  \bmod 4)\right)</script><script type="math/tex; mode=display">n\rightarrow (x_n,y_n)</script><p><img src="https://s2.ax1x.com/2019/01/26/knL4Yj.jpg" alt=""> </p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>解答来自知乎   <a href="https://www.zhihu.com/question/296719713/answer/501579029" target="_blank" rel="noopener">https://www.zhihu.com/question/296719713/answer/501579029</a> —— 酱紫君</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;提问&quot;&gt;&lt;a href=&quot;#提问&quot; class=&quot;headerlink&quot; title=&quot;提问&quot;&gt;&lt;/a&gt;提问&lt;/h2&gt;&lt;p&gt;当我知道复数是无法比较大小的时候，我就怀疑这个命题了，如果我能从复数映射到实数，并且从实数映射到复数：  &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\mathbb{C}\rightarrow\mathbb{R}\\ \mathbb{R}\rightarrow\mathbb{C}&lt;/script&gt;&lt;p&gt;也就是任意的复数都有一个实数与之一一对应，那我就可以利用实数的性质将所有复数进行排序了，这就可以比较复数大小了。我们知道复数可以与平面上的点一一对应，经过我的思考，我想了一个办法，利用等速螺线：  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/01/26/knLR0S.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="程序&amp;算法" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F-%E7%AE%97%E6%B3%95/"/>
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="Mathematica" scheme="http://yoursite.com/tags/Mathematica/"/>
    
  </entry>
  
  <entry>
    <title>游戏与意义</title>
    <link href="http://yoursite.com/2018/08/27/%E6%B8%B8%E6%88%8F%E4%B8%8E%E6%84%8F%E4%B9%89/"/>
    <id>http://yoursite.com/2018/08/27/游戏与意义/</id>
    <published>2018-08-27T06:52:54.000Z</published>
    <updated>2019-01-24T12:35:32.196Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;小时候十分迷恋电脑游戏，以至于只要父母不在，就偷偷打开电脑玩游戏。我玩过很多游戏，最早是还在上幼儿园中班时，路过电玩俱乐部，我哭闹着要求父亲带我进去玩赛车游戏。后来我在父亲电脑里发现了某个射击游戏，迷恋这个游戏的我，经常连饭都不吃，父亲一气之下把电脑中的游戏全删了。我至今为止还记得电脑前额头流着汗珠的父亲打开WindowsXP中的搜索狗搜索已被他删除的游戏，和站在一旁满脸泪花，嚎啕大哭的我。<br><a id="more"></a><br>&emsp;&emsp;仔细想来我从真正迷恋游戏到放弃游戏大概是3年时间，而我玩过的游戏却数不胜数，这其中包括了无数网页小游戏，网游，端游，独立游戏。也不知为什么，从什么时候起，我突然对游戏不感兴趣了，我觉得大概是五年级左右吧，我小时候内向，没什么朋友，也不经常与朋友出去玩，而喜欢在网络上探索一些东西，当我接触了很多游戏和软件，这时我对游戏是如何开发出来的，软件是怎么制作的有了一定的兴趣。于是我接触了RPG游戏制作软件RPG Maker XP和编程，并一步步的深入了解编程。看到这里你应该知道，我因为对一些我认为更有趣的东西——编程，软件技术所吸引，我认为这些东西更酷，更有意义，便对游戏索然无味了。</p><p>&emsp;&emsp;前些日子我沦落了，因为我没有在网络上寻找有知识，有技术含量的东西，而再次沦入游戏世界，我在手机上下载了PUBG Mobile玩了大概一个星期，每次玩这个游戏都是因为我不知道我要干什么，只好打发时间了。有时我突然在游戏中醒来，我问我自己：你在做什么？我告诉我自己：玩游戏不过是我内心的空虚，没有任何意义。我便毅然卸载游戏，但这却解决不了根本问题，没过多久，我便再把游戏安装，这样滑稽的事情至少发生5次了。我应该明白，解决这个根本问题的方法应该是重拾那些自己觉得酷，有知识含量，有技术含量的东西，去探索它们，才能解决内心的空虚，对知识渴望。</p><p>&emsp;&emsp;我不喜欢游戏，但游戏并没有错，它是时代产物，它有巨大的商业价值，它有它存在的意义，现代的社会缺少它甚至无法正常运转，但我不能对热爱游戏的人产生偏见，热爱游戏的人也不要对热爱技术的我产生偏见，它只不过是不同的人的不同兴趣罢了，都有存在的价值，都值得每个人尊重。</p><p>&emsp;&emsp;我这个人喜欢分享，我会把我学来的，新奇的，有知识和技术的东西分享给别人，所以我在高中，经常会拉我的朋友过来让他听我讲那些我自认为酷的东西。这些东西包括了哲学，计算机学，算法学，几何学，数学，物理学，化学，数字电路等等，当然只是其中一些很浅薄的内容。你或许认为我是个理科狂人，我不否认，但事实上我兴趣面很广，除此之外我还喜欢政治，历史和地理，并且我还喜欢音乐和创作音乐。我总感觉我像沙滩上的男孩，时不时低头捡起贝壳，看看然后把它扔掉，时不时又抬头看看大海，远眺晴空，而不像海盗那样挖掘宝藏，驶船征服大海。</p><p>&emsp;&emsp;当我还在初三时，我就会跟我的朋友滔滔不绝的讲量子力学，量子纠缠，波函数，波坍塌，不确定性原理等等。当我们学到三角恒等变换的时候，我便兴奋的讲如何利用复变函数找到sin(x)=2的根，当学到数列的时候，我便激动的讲如何求出斐波那契数列的通项公式，当学到向量时，我便会喜悦的讲如何用向量外积秒杀某些数学题。当我学到苯的时候，我便欢快的讲离域大π键。我举的例子似乎过多，但实质上不止这些，我只是想证明我是个求知欲很强，并喜欢分享这些知识的人。这样做的后果无疑会让一些人认为我很会装逼，但我也无可奈何。</p><p>&emsp;&emsp;我尝试与朋友分享这些东西的时候，他们有时会问一个很经典的问题：这有什么意义呢？我知道这是一个反问句，其实说明了他对我所分享的东西不感兴趣甚至不屑。有时我心中或许会有一丝恼怒和不解，即便这些东西不会出考题，即便它对我们的生活似乎没什么用处，但它的确是知识，这些知识潜移默化的改变着我们，是有意义的，或者对我来说就是很酷的！同时我也应该反思：我何必与一个对这些东西不感兴趣的人分享这些呢？换位思考，假如一个人突然涛涛不绝的与我聊某游戏，某皮肤，某服装，某武器时，或许我也一样，反问他一句：这有什么意义呢？不同的人不同的兴趣，再正常不过了，需要的是理解，而不是偏见。</p><p>&emsp;&emsp;总之，在生活学习中，不要反问别人做一件事有什么意义，因为这本身就是一件可笑又无意义的事情。在未来，现实之下，人生当中应该多懂一些道理，多遇一些有趣的人。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;小时候十分迷恋电脑游戏，以至于只要父母不在，就偷偷打开电脑玩游戏。我玩过很多游戏，最早是还在上幼儿园中班时，路过电玩俱乐部，我哭闹着要求父亲带我进去玩赛车游戏。后来我在父亲电脑里发现了某个射击游戏，迷恋这个游戏的我，经常连饭都不吃，父亲一气之下把电脑中的游戏全删了。我至今为止还记得电脑前额头流着汗珠的父亲打开WindowsXP中的搜索狗搜索已被他删除的游戏，和站在一旁满脸泪花，嚎啕大哭的我。&lt;br&gt;
    
    </summary>
    
    
      <category term="杂文" scheme="http://yoursite.com/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL着色器（Shader）和GLSL语言的简单介绍</title>
    <link href="http://yoursite.com/2018/08/26/OpenGL%E7%9D%80%E8%89%B2%E5%99%A8%EF%BC%88Shader%EF%BC%89%E5%92%8CGLSL%E8%AF%AD%E8%A8%80%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2018/08/26/OpenGL着色器（Shader）和GLSL语言的简单介绍/</id>
    <published>2018-08-26T13:11:26.000Z</published>
    <updated>2019-01-25T06:55:36.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在Android上发现一个开源软件，叫做ShaderEditor（着色编辑器），可以用它编写GLSL程序并且预览，还能与Android内置变量联系（电量，陀螺仪，磁力，触摸，等等），还可以将效果作用于桌面壁纸，非常酷炫，在深入了解之后认识了OpenGL和GLSL（Graphics Library Shader Language）<br>开源地址：<a href="https://github.com/markusfisch/ShaderEditor" target="_blank" rel="noopener">https://github.com/markusfisch/ShaderEditor</a><br>这里我展示了用这个编辑器编写的3D河豚，3D海浪，火焰，生命游戏（元胞自动机）  </p><p><img src="https://upload-images.jianshu.io/upload_images/15006683-a80eea48a8314986.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><a id="more"></a><br><img src="https://upload-images.jianshu.io/upload_images/15006683-c0be9f388da276d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/15006683-087864e6d5fb3d38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/15006683-59197f34589becad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="什么是OpenGL？"><a href="#什么是OpenGL？" class="headerlink" title="什么是OpenGL？"></a>什么是OpenGL？</h2><p>OpenGL（全写Open Graphics Library）是指定义了一个跨编程语言、跨平台的编程接口规格的专业的图形程序接口。它用于三维图像（二维的亦可），是一个功能强大，调用方便的底层图形库。  </p><p>OpenGL™ 是行业领域中最为广泛接纳的 2D/3D 图形 API，其自诞生至今已催生了各种计算机平台及设备上的数千优秀应用程序。OpenGL™ 是独立于视窗操作系统或其它操作系统的，亦是网络透明的。在包含CAD、内容创作、能源、娱乐、游戏开发、制造业、制药业及虚拟现实等行业领域中，OpenGL™ 帮助程序员实现在 PC、工作站、超级计算机等硬件设备上的高性能、极具冲击力的高视觉表现力图形处理软件的开发。——百度百科  </p><h2 id="什么是Shader？"><a href="#什么是Shader？" class="headerlink" title="什么是Shader？"></a>什么是Shader？</h2><p>着色器（Shader）是用来实现图像渲染的，用来替代固定渲染管线的可编辑程序。其中Vertex Shader主要负责顶点的几何关系等的运算，Pixel Shader主要负责片源颜色等的计算。  </p><p>着色器替代了传统的固定渲染管线，可以实现3D图形学计算中的相关计算，由于其可编辑性，可以实现各种各样的图像效果而不用受显卡的固定渲染管线限制。  </p><h2 id="什么是GLSL？"><a href="#什么是GLSL？" class="headerlink" title="什么是GLSL？"></a>什么是GLSL？</h2><p>OpenGL着色语言（OpenGL Shading Language）是用来在OpenGL中着色编程的语言，也即开发人员写的短小的自定义程序，他们是在图形卡的GPU （Graphic Processor Unit图形处理单元）上执行的，代替了固定的渲染管线的一部分，使渲染管线中不同层次具有可编程性。比如：视图转换、投影转换等。GLSL（GL Shading Language）的着色器代码分成2个部分：Vertex Shader（顶点着色器）和Fragment（片断着色器），有时还会有Geometry Shader（几何着色器）。负责运行顶点着色的是顶点着色器。它可以得到当前OpenGL 中的状态，GLSL内置变量进行传递。GLSL其使用C语言作为基础高阶着色语言，避免了使用汇编语言或硬件规格语言的复杂性。  </p><h2 id="GLSL简单实例分析"><a href="#GLSL简单实例分析" class="headerlink" title="GLSL简单实例分析"></a>GLSL简单实例分析</h2><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#ifdef GL_FRAGMENT_PRECISION_HIGH</span></span><br><span class="line"><span class="keyword">precision</span> <span class="keyword">highp</span> <span class="type">float</span>;</span><br><span class="line"><span class="meta">#else</span></span><br><span class="line"><span class="keyword">precision</span> <span class="keyword">mediump</span> <span class="type">float</span>;</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line"> <span class="comment">//上面是预编译，如果设备支持就使用高精度模式（更高精度的浮点运算），否则使用低精度模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec2</span> resolution;</span><br><span class="line"> <span class="comment">//只读的全局变量，是一个二维浮点向量，表示当前设备的分辨率</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main(<span class="type">void</span>)</span><br><span class="line"> <span class="comment">//用于着色的主函数</span></span><br><span class="line">&#123;</span><br><span class="line">true<span class="type">vec2</span> uv = <span class="built_in">gl_FragCoord</span>.xy / resolutionCoord.xy<span class="comment">//当前着色像素坐标与设备分辨率的比值</span></span><br><span class="line">true<span class="type">vec4</span> wave_color = <span class="type">vec4</span>(uv, <span class="number">1.0</span>, <span class="number">1.0</span>);<span class="comment">//uv设置了当前像素的红绿（RG）程度，蓝色（B）程度固定为1.0,透明度（A）固定为1.0</span></span><br><span class="line">true<span class="built_in">gl_FragColor</span> = wave_color;<span class="comment">//将颜色（一个四维向量）赋值给gl_FragColor，这是设置当前像素颜色的固定写法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到GLSL语言风格与C语言非常相似，上手比较容易。<br>二维浮点向量<code>vec2 vec</code>相当于C语言中的数组<code>float vec[2]</code>。<br>事实上GLSL也支持数组，如<code>vec2 vec[2]</code>相当于C语言中的二维数组<code>float vec[2][2]</code></p><h2 id="OpenGL学习网站"><a href="#OpenGL学习网站" class="headerlink" title="OpenGL学习网站"></a>OpenGL学习网站</h2><p>OpenGL学习网站——<a href="https://learnopengl-cn.github.io/" target="_blank" rel="noopener">https://learnopengl-cn.github.io/</a></p><h2 id="OpenGL深度介绍博客"><a href="#OpenGL深度介绍博客" class="headerlink" title="OpenGL深度介绍博客"></a>OpenGL深度介绍博客</h2><p>OpenGL深度介绍博客——<a href="http://www.twinklingstar.cn/category/opengl/" target="_blank" rel="noopener">http://www.twinklingstar.cn/category/opengl/</a></p><h2 id="GLSL中文手册"><a href="#GLSL中文手册" class="headerlink" title="GLSL中文手册"></a>GLSL中文手册</h2><p>GLSL中文手册——<a href="https://blog.csdn.net/hk_shao/article/details/82084274" target="_blank" rel="noopener">https://blog.csdn.net/hk_shao/article/details/82084274</a></p><h2 id="GLSL程序展示"><a href="#GLSL程序展示" class="headerlink" title="GLSL程序展示"></a>GLSL程序展示</h2><p>效果参见本文开头图片</p><ul><li>3D河豚鱼——<a href="https://blog.csdn.net/hk_shao/article/details/82084361" target="_blank" rel="noopener">https://blog.csdn.net/hk_shao/article/details/82084361</a></li><li>火焰效果——<a href="https://blog.csdn.net/hk_shao/article/details/82084411" target="_blank" rel="noopener">https://blog.csdn.net/hk_shao/article/details/82084411</a></li><li>3D海洋——<a href="https://blog.csdn.net/hk_shao/article/details/82084448" target="_blank" rel="noopener">https://blog.csdn.net/hk_shao/article/details/82084448</a></li><li>生命游戏（元胞自动机）——<a href="https://blog.csdn.net/hk_shao/article/details/82084481" target="_blank" rel="noopener">https://blog.csdn.net/hk_shao/article/details/82084481</a>  </li></ul><h2 id="国外着色器（Shader）源码分享网站"><a href="#国外着色器（Shader）源码分享网站" class="headerlink" title="国外着色器（Shader）源码分享网站"></a>国外着色器（Shader）源码分享网站</h2><p>Shadertoy——<a href="https://www.shadertoy.com/" target="_blank" rel="noopener">https://www.shadertoy.com/</a>  </p><h3 id="以上，本文结束"><a href="#以上，本文结束" class="headerlink" title="以上，本文结束"></a>以上，本文结束</h3><h5 id="本文章大部分内容来自网络，本人只是整理和简要说明，方便大家。"><a href="#本文章大部分内容来自网络，本人只是整理和简要说明，方便大家。" class="headerlink" title="本文章大部分内容来自网络，本人只是整理和简要说明，方便大家。"></a>本文章大部分内容来自网络，本人只是整理和简要说明，方便大家。</h5>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在Android上发现一个开源软件，叫做ShaderEditor（着色编辑器），可以用它编写GLSL程序并且预览，还能与Android内置变量联系（电量，陀螺仪，磁力，触摸，等等），还可以将效果作用于桌面壁纸，非常酷炫，在深入了解之后认识了OpenGL和GLSL（Graphics Library Shader Language）&lt;br&gt;开源地址：&lt;a href=&quot;https://github.com/markusfisch/ShaderEditor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/markusfisch/ShaderEditor&lt;/a&gt;&lt;br&gt;这里我展示了用这个编辑器编写的3D河豚，3D海浪，火焰，生命游戏（元胞自动机）  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15006683-a80eea48a8314986.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
    
      <category term="程序&amp;算法" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F-%E7%AE%97%E6%B3%95/"/>
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>向量外积的高中数学运用</title>
    <link href="http://yoursite.com/2018/06/16/%E5%90%91%E9%87%8F%E5%A4%96%E7%A7%AF%E7%9A%84%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6%E8%BF%90%E7%94%A8/"/>
    <id>http://yoursite.com/2018/06/16/向量外积的高中数学运用/</id>
    <published>2018-06-16T14:43:20.000Z</published>
    <updated>2019-01-27T12:04:19.146Z</updated>
    
    <content type="html"><![CDATA[<p>向量积，数学中又称外积、叉积，物理中称矢积、叉乘，是一种在向量空间中向量的二元运算。与点积不同，它的运算结果是一个向量而不是一个标量。并且两个向量的叉积与这两个向量和垂直。其应用十分广泛，通常应用于物理学光学和计算机图形学中。<br>如图，这是 $(2, 4) × (3, 0) = -12$ ，我们得到了一个实数 $-12$ ，而其绝对值为平行四边形面积。<br><img src="https://upload-images.jianshu.io/upload_images/15006683-b7aafc478f85d9d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><a id="more"></a><br>如图，这是 $(1, 0, 0) × (2, 4, 0) = (0, 0, 4)$ ，我们得到了一个垂直与已知两向量的法向量，且其模长为平行四边形面积。<br><img src="https://upload-images.jianshu.io/upload_images/15006683-bccfdcde8bae7164.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p><h2 id="运算定理"><a href="#运算定理" class="headerlink" title="运算定理"></a>运算定理</h2><p>$\vec{a},\vec b$ 均为向量，$θ$ 为 $\vec{a},\vec b$ 的夹角   </p><p>1，$\qquad|\vec{a}\times \vec{b}|=|\vec{a}| \times |\vec{b}|sinθ$  </p><p>2，$\qquad\vec{a}\times \vec{b}=(l,m,n) \times (o,p,q)=(mq-np,no-lq,lp-mo)$  </p><p>3，$\qquad\vec{a}\times \vec{b}=-(\vec{b} \times \vec a)$  </p><h2 id="运用1，已知三点坐标，求三角形面积"><a href="#运用1，已知三点坐标，求三角形面积" class="headerlink" title="运用1，已知三点坐标，求三角形面积"></a>运用1，已知三点坐标，求三角形面积</h2><p>以任意一个点坐标为基准，做差得到两个向量，这两个向量可围成向量三角形<br>例如点 $A (a, b, c)$ ，点 $B (d, e, f)$ ，点 $C (g, h, i)$<br>得到向量 $\vec{p} = (d - a, e - b, f - c)$ 和 $\vec{q} = (g - a, h - b, i - c)$<br>使用公式2，然后取绝对值，得到三角形面积 $S = | \vec{p} \times \vec{q} | / 2$  </p><p>空间向量外积求三角形面积可以很容易的推广到平面  </p><p>令 </p><script type="math/tex; mode=display">\ n = 0，q = 0</script><p>则有 </p><script type="math/tex; mode=display">\vec{a} ×\vec{b}= (l, m, 0) × (o, p, 0) = (0, 0, lp - mo)</script><p>故 </p><script type="math/tex; mode=display">S =  |\vec{a}×\vec{b}| / 2 = | lp - mo | / 2</script><p><em>三角形是最简单的几何图形，而在计算机领域求多边形面积是非常重要的，而用向量外积算出的有向面积，是解决求多边形面积的重要方法，它适用于凸多边形和凹多边形，非常灵活，简洁优美。</em>  </p><h2 id="运用2，已知平面，求平面的法向量"><a href="#运用2，已知平面，求平面的法向量" class="headerlink" title="运用2，已知平面，求平面的法向量"></a>运用2，已知平面，求平面的法向量</h2><p>找到平面内不共线的两向量 $\vec a,\vec b$ ，这两个向量决定了这个平面<br>使用公式2，得到向量 $\vec c$ ，按照向量外积的定义，$\vec c$ 垂直于 $\vec a,\vec b$<br>故所求向量 $\vec c$ 即平面的法向量  </p><p><em>向量外积得到的法向量，有很多用途，尤其是物理上的，例如3D图像渲染在CG和游戏领域非常重要，而好的视觉效果多半取决于环境光的仿真，光的传播有一个最基本的定理，那就是光线与平面的法线所成的反射角等于入射角，而与利用向量外积求平面法线，是最简洁优美的。</em></p><h2 id="运用3，求三棱锥体积"><a href="#运用3，求三棱锥体积" class="headerlink" title="运用3，求三棱锥体积"></a>运用3，求三棱锥体积</h2><p>由三个不共面向量 $\vec{a},\vec{b},\vec{c}$ 所决定的平行六面体的体积为  </p><script type="math/tex; mode=display">V=|\vec{a} \cdot ({\vec{b} \times} \vec{c})|=|\vec{b} \cdot ({\vec{a} \times} \vec{c})|=|\vec{c} \cdot ({\vec{a} \times} \vec{b})|</script><p>故由三个不共面向量所决定的三棱锥的体积为 $V/6$</p><h2 id="运用4，高中数学外挂"><a href="#运用4，高中数学外挂" class="headerlink" title="运用4，高中数学外挂"></a>运用4，高中数学外挂</h2><p>用它来做高中数学题简直就是开挂。</p><p>已知三点坐标，求三角形面积这个问题。按照高中数学的套路，无非就是两点间距离公式算三边长，然后要么用海伦公式算面积，要么用余弦定理求出余弦值，换成正弦值，再求面积，这两种方法海伦公式稍微简便一点，但无非都难算了一些。而使用向量外积则简洁优美，我直接算 $|\vec{a}×\vec{b}| / 2$ 的值就是面积了。</p><p>已知平面，求平面的法向量这个问题。按照高中数学的套路，无非找出平面内两个不共线向量 $\vec a,\vec b$ ，然后设平面的法向量 $\vec{c} = (x, y, z)$ 然后根据向量垂直 $\vec{c} \cdot\vec{a}= 0$ 和 $\vec{c} \cdot\vec{b}= 0$ 联立解得 $x,y,z$ 为含参的式子(因为一个平面的法向量有无数个)，最后取一个容易计算的法向量。而使用向量外积，那就很简单了，计算 $\vec{a} × \vec b$ 就搞定了。</p><p>已知三棱锥的各个点坐标，求它的体积这个问题。按照高中数学的套路，无非就是用余弦定理和正弦定理暴算一个面的面积，再用向量的余弦定理暴算点到面的距离，然后求出体积。如果使用上述的公式，一步就能算出体积，非常方便。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;向量积，数学中又称外积、叉积，物理中称矢积、叉乘，是一种在向量空间中向量的二元运算。与点积不同，它的运算结果是一个向量而不是一个标量。并且两个向量的叉积与这两个向量和垂直。其应用十分广泛，通常应用于物理学光学和计算机图形学中。&lt;br&gt;如图，这是 $(2, 4) × (3, 0) = -12$ ，我们得到了一个实数 $-12$ ，而其绝对值为平行四边形面积。&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15006683-b7aafc478f85d9d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="高中" scheme="http://yoursite.com/tags/%E9%AB%98%E4%B8%AD/"/>
    
  </entry>
  
</feed>
